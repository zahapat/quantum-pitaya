# ----- Libraries -----
import math as lib_math
import random as lib_rand
import csv as lib_csv
import pathlib as lib_path
import FiniteFieldsLib as lib_ff
import CrcGenLib as lib_crc
import sys


# ----- Functions Declaration -----
# Generate a VHDL file with a single symbolic-tuple-parallel CRC
def create_files_crc_rx_vhdl(_rx_dir, _delimiter, _int_symbol_width, _list_prim_poly, _int_msg_symbols_cnt, _int_msg_tuplewidth, _list_symbol_seed, _list_gen_pol, _list_in_msg_files, _submessages_cnt, _number_of_transactions, _lib_src, _lib_sim):

    # print('_rx_dir = ', _rx_dir)
    # print('_delimiter = ', _delimiter)
    # print('_int_symbol_width = ', _int_symbol_width)
    # print('_list_prim_poly = ', _list_prim_poly)
    # print('_int_msg_symbols_cnt = ', _int_msg_symbols_cnt)
    # print('_int_msg_tuplewidth = ', _int_msg_tuplewidth)
    # print('_list_symbol_seed = ', _list_symbol_seed)
    # print('_list_gen_pol = ', _list_gen_pol)
    # print('_list_in_msg_files = ', _list_in_msg_files)
    # print('_submessages_cnt = ', _submessages_cnt)
    # sys.exit(2)



    # Add new constant zero bits if the number of input bits message is not divisible by the symbol width and tuple width without remainder
    _list_new_in_msg_files_not_flatnd = []
    _list_new_in_msg_files_not_flatnd.append(_list_in_msg_files)
    _list_new_in_msg_files = lib_ff.flatten_list(_list_new_in_msg_files_not_flatnd)
    lib_ff.flatten_list(_list_new_in_msg_files)
    _cnt_new_bits_added = 0
    # if (_msg_symbolwidth > len(_list_new_in_msg)/_symbol_width):
    if ((_int_msg_symbols_cnt > len(_list_new_in_msg_files)/_int_symbol_width) | ((len(_list_new_in_msg_files)/_int_symbol_width) % _int_msg_tuplewidth != 0)):
        # while ((_int_msg_symbols_cnt != len(_list_new_in_msg)/_int_symbol_width) | (len(_list_new_in_msg) % _int_symbol_width != 0)):
        while ((len(_list_new_in_msg_files) % _int_symbol_width != 0) | ((len(_list_new_in_msg_files)/_int_symbol_width) % _int_msg_tuplewidth != 0)):
            _cnt_new_bits_added += 1
            _list_new_in_msg_files.insert(0, 0)
    
    print('Added ', _cnt_new_bits_added, ' bits to the message.')
    print('_list_new_in_msg_files: ', _list_new_in_msg_files)
    print('The message now consists of ', int(len(_list_new_in_msg_files)/_int_symbol_width), ' symbols.')



    # Slice input into separate symbols and eventually add some bits to make the _list_in_msg be divisible by _int_symbol_width without remainder
    # TO DO: Add zeros where necessary
    # _msg_bucketlist = lib_ff.msg_slice_in_symbols(_int_symbol_width, _int_msg_symbols_cnt, _list_new_in_msg)
    _msg_bucketlist_files = lib_ff.msg_slice_in_symbols(_int_symbol_width, int(len(_list_new_in_msg_files)/_int_symbol_width), _list_new_in_msg_files)
    print('_msg_bucketlist =', _msg_bucketlist_files)

    _int_msg_parts = len(_msg_bucketlist_files) / _int_msg_tuplewidth

    # Check if the actual _msg_bucketlist can be divided into tuples of symbols without remainder
    # _cnt_new_symbols_added = 0
    # if ((len(_msg_bucketlist) % _int_msg_tuplewidth) == 0):
        # _int_msg_parts = len(_msg_bucketlist) / _int_msg_tuplewidth
        # print('Divisibility check OK. "_int_msg_parts: "', _int_msg_parts)
    # else:
        # Add new symbols if the _msg_bucketlist is not divisible without remainder
        # _act_length_msg = len(_msg_bucketlist)
        # _list_new_in_msg_bucketlist = _msg_bucketlist
        # _cnt_new_symbols_added = 0
        # if (_int_msg_tuplewidth > len(_msg_bucketlist)/_int_msg_tuplewidth):
        #     # Add zero symbols to the nearest tuple without remainder
        #     while (len(_list_new_in_msg_bucketlist) % _int_msg_tuplewidth != 0):
        #         _cnt_new_symbols_added += 1
        #         _list_new_in_msg_bucketlist.insert(0, [0 for i in range(_int_symbol_width)])

        # _act_length_msg = len(_msg_bucketlist)
        # # _list_new_in_msg_bucketlist = _msg_bucketlist
        # _cnt_new_symbols_added = 0
        # if (_int_msg_tuplewidth > len(_msg_bucketlist)/_int_msg_tuplewidth):
        #     # Add zero symbols to the nearest tuple without remainder
        #     while (len(_msg_bucketlist) % _int_msg_tuplewidth != 0):
        #         _cnt_new_symbols_added += 1
        #         _msg_bucketlist.insert(0, [0 for i in range(_int_symbol_width)])

        # _int_msg_parts = len(_msg_bucketlist) / _int_msg_tuplewidth
        # print('Divisibility check previously NOK. Actual msg parts: "_int_msg_parts: "', _int_msg_parts)
        # print('Added ', _cnt_new_symbols_added, ' symbols to the message.')
        # print('_list_new_in_msg_bucketlist: ', _msg_bucketlist)
        # print('The message now consists of ', int(len(_msg_bucketlist)/_int_msg_tuplewidth), ' tuples of symbols.')


    _list_submessages_start_end = lib_crc.get_submessages_bits_start_end(_int_symbol_width, _int_msg_symbols_cnt, _int_msg_tuplewidth, _submessages_cnt, _list_in_msg_files)



    # _rx_dir = lib_path.Path().absolute()

    # ---- VHDL DESIGN ----
    _file_crc_rx_gen_name = 'rx_crc_symtuppar.vhd'
    # _file_crc_rx_gen_fullpath = ('{0}\\{1}'.format(_rx_dir, _file_crc_rx_gen_name))
    _file_crc_rx_gen_fullpath = ('{0}{1}{2}'.format(_rx_dir, _delimiter, _file_crc_rx_gen_name))
    # file_1_fullpath = ('{0}{1}{2}'.format(dir_current_file, delimiter, file_1_name))
    print('new file', _file_crc_rx_gen_name,'created: ', _file_crc_rx_gen_fullpath)
    _file_crc_rx_gen_line = open(_file_crc_rx_gen_fullpath, 'w')

    _file_crc_rx_gen_line.write('    -- File "rx_crc_symtuppar.vhd" contains generated hardware architecture of a Symbolic-Tuple-Parallel CRC\n')
    _file_crc_rx_gen_line.write('    -- Including parallel Galois Field multipliers generating only XOR gates\n')
    _file_crc_rx_gen_line.write('    -- Engineer: Patrik Zahalka (patrik.zahalka@univie.ac.at; zahalka.patrik@gmail.com)\n')
    _file_crc_rx_gen_line.write('    -- Year: 2021\n')
    _file_crc_rx_gen_line.write('    -- Bits per symbol: ')
    _file_crc_rx_gen_line.write('{}'.format(_int_symbol_width))
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    -- Input symbols to process: ')
    _file_crc_rx_gen_line.write('{}'.format(_int_msg_symbols_cnt))
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    -- Zero bits to add: ')
    _file_crc_rx_gen_line.write('{}'.format(_cnt_new_bits_added))
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    -- Primitive polynomial (= creates tuples of bits)(dec): ')
    _file_crc_rx_gen_line.write('{}'.format(int(str(lib_ff.merge_intlist_to_string(_list_prim_poly)),2)))
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    -- Seed for the Galois Field (dec): ')
    _file_crc_rx_gen_line.write('{}'.format(int(str(lib_ff.merge_intlist_to_string(_list_symbol_seed)),2)))
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    -- Generator polynomial (= creates tuple of symbols)(dec): ')
    for t in range(len(_list_gen_pol)-1):
        _file_crc_rx_gen_line.write('{}, '.format(int(str(lib_ff.merge_intlist_to_string(_list_gen_pol[t])),2)))
    _file_crc_rx_gen_line.write('{}'.format(int(str(lib_ff.merge_intlist_to_string(_list_gen_pol[len(_list_gen_pol)-1])),2)))
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    -- Symbols per tuple: ')
    _file_crc_rx_gen_line.write('{}'.format(_int_msg_tuplewidth))
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    -- Tuples count: ')
    _file_crc_rx_gen_line.write('{}'.format(int(_int_msg_parts)))
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    -- Number of sub-messages: ')
    _file_crc_rx_gen_line.write('{}'.format(_submessages_cnt))
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    library ieee;\n')
    _file_crc_rx_gen_line.write('    use ieee.std_logic_1164.all;\n')
    _file_crc_rx_gen_line.write('    use ieee.numeric_std.all;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    library {};\n'.format(str(_lib_src)))
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    entity rx_crc_symtuppar is\n')
    _file_crc_rx_gen_line.write('        generic (\n')
    _file_crc_rx_gen_line.write('            SYMBOL_WIDTH    : integer := ')
    _file_crc_rx_gen_line.write('{}'.format(_int_symbol_width))
    _file_crc_rx_gen_line.write(';\n')
    _file_crc_rx_gen_line.write('            MSG_SYMBOLS     : integer := ')
    _file_crc_rx_gen_line.write('{}'.format(_int_msg_symbols_cnt))
    _file_crc_rx_gen_line.write(';\n')
    _file_crc_rx_gen_line.write('            ZEROS_ADDED     : integer := ')
    _file_crc_rx_gen_line.write('{}'.format(_cnt_new_bits_added))
    _file_crc_rx_gen_line.write(';\n')
    _file_crc_rx_gen_line.write('            TUPLE_WIDTH     : integer := ')
    _file_crc_rx_gen_line.write('{}'.format(_int_msg_tuplewidth))
    _file_crc_rx_gen_line.write(';\n')
    _file_crc_rx_gen_line.write('            TUPLES_CNT      : integer := ')
    _file_crc_rx_gen_line.write('{}'.format(int(_int_msg_parts)))
    _file_crc_rx_gen_line.write(';\n')
    _file_crc_rx_gen_line.write('            SUBMESSAGES_CNT : integer := ')
    _file_crc_rx_gen_line.write('{}'.format(_submessages_cnt))
    _file_crc_rx_gen_line.write(';\n')
    _file_crc_rx_gen_line.write('            SYNCH_DESIGN    : boolean := true')
    _file_crc_rx_gen_line.write(';\n')
    _file_crc_rx_gen_line.write('            REGS_SUBMSG_CNT : integer := 1')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        );\n')
    _file_crc_rx_gen_line.write('        port (\n')
    _file_crc_rx_gen_line.write('            CLK     : in std_logic;\n')
    _file_crc_rx_gen_line.write('            IN_DATA : in std_logic_vector(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('            OUT_SYN : out std_logic_vector(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('            OUT_MSG : out std_logic_vector(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0)\n')
    _file_crc_rx_gen_line.write('        );\n')
    _file_crc_rx_gen_line.write('    end rx_crc_symtuppar;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    architecture rtl of rx_crc_symtuppar is\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        -- Divide the input "IN_DATA" into "SUBMESSAGES_CNT" parts and preserve the number of input bits\n')
    _file_crc_rx_gen_line.write('        type t_bits_submsg_start_end_2d is array(SUBMESSAGES_CNT-1 downto 0) of integer;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        -- Uncomment these lines if "SUBMESSAGES_CNT > 1"\n')
    if (_submessages_cnt > 1):
        _file_crc_rx_gen_line.write('        constant BITS_SUBMSG_START_2D : t_bits_submsg_start_end_2d := (')
        _file_crc_rx_gen_line.write('{}'.format(_list_submessages_start_end[0][0]))
        for _i in range(1, len(_list_submessages_start_end[0])):
            _file_crc_rx_gen_line.write(', {}'.format(_list_submessages_start_end[0][_i]))
        _file_crc_rx_gen_line.write(');\n')
        _file_crc_rx_gen_line.write('        constant BITS_SUBMSG_END_2D : t_bits_submsg_start_end_2d := (')
        _file_crc_rx_gen_line.write('{}'.format(_list_submessages_start_end[1][0]))
        for _i in range(1, len(_list_submessages_start_end[1])):
            _file_crc_rx_gen_line.write(', {}'.format(_list_submessages_start_end[1][_i]))
        _file_crc_rx_gen_line.write(');\n')
    else:
        _file_crc_rx_gen_line.write('        -- constant BITS_SUBMSG_START_2D : t_bits_submsg_start_end_2d;\n')
        _file_crc_rx_gen_line.write('        -- constant BITS_SUBMSG_END_2D : t_bits_submsg_start_end_2d;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        -- Uncomment these lines if "SUBMESSAGES_CNT = 1"\n')
    if (_submessages_cnt == 1):
        _file_crc_rx_gen_line.write('        constant BITS_SUBMSG_START_2D : t_bits_submsg_start_end_2d := (others => 0);\n')
        _file_crc_rx_gen_line.write('        constant BITS_SUBMSG_END_2D : t_bits_submsg_start_end_2d := (others => 0);\n')
    else:
        _file_crc_rx_gen_line.write('        -- constant BITS_SUBMSG_START_2D : t_bits_submsg_start_end_2d := (others => 0);\n')
        _file_crc_rx_gen_line.write('        -- constant BITS_SUBMSG_END_2D : t_bits_submsg_start_end_2d := (others => 0);\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        -- Primitive polynomial and Characteristic Matrix\n')
    _file_crc_rx_gen_line.write('        constant PRIM_POLY     : std_logic_vector(SYMBOL_WIDTH downto 0) := "')
    _file_crc_rx_gen_line.write('{}'.format(lib_ff.conv_list_to_int(_list_prim_poly)))
    _file_crc_rx_gen_line.write('";\n')
    _file_crc_rx_gen_line.write('        constant CHAR_MATRIX_A : std_logic_vector(')
    gen_char_matrix_a = lib_crc.generate_char_matrix_a_symbols(_int_symbol_width, _list_prim_poly, _int_msg_tuplewidth, _list_symbol_seed, _list_gen_pol)
    print("Char matrix A into the VHDL file: ", lib_ff.merge_intlist_to_string(lib_ff.flatten_list(gen_char_matrix_a)))
    _file_crc_rx_gen_line.write('{}'.format(len(lib_ff.flatten_list(gen_char_matrix_a))))
    _file_crc_rx_gen_line.write('-1 downto 0) := "')
    _file_crc_rx_gen_line.write('{}'.format(lib_ff.merge_intlist_to_string(lib_ff.flatten_list(gen_char_matrix_a))))
    _file_crc_rx_gen_line.write('";\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        -- Total delay of the component (number of registers on the path form in to out)\n')
    _file_crc_rx_gen_line.write('        constant DELAY : integer := 1 + REGS_SUBMSG_CNT;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        -- Signals for inserting desired input bits and filling tohe rest to the tuple with zeros\n')
    _file_crc_rx_gen_line.write('        type t_submessages_2d is array(SUBMESSAGES_CNT-1 downto 0) of std_logic_vector(TUPLE_WIDTH*TUPLES_CNT*SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('        type t_reg_submessages_3d is array(DELAY downto 0) of t_submessages_2d;\n')
    _file_crc_rx_gen_line.write('        signal s_submessages_2d : t_submessages_2d := (others => (others => \'0\'));\n')
    _file_crc_rx_gen_line.write('        signal s_reg_submessages_3d : t_reg_submessages_3d := (others => (others => (others => \'0\')));\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        -- Signals for a single message\n')
    _file_crc_rx_gen_line.write('        type t_vec_s_2d is array(TUPLE_WIDTH-1 downto 0) of std_logic_vector(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('        type t_vec_s_3d is array(TUPLES_CNT-1 downto 0) of t_vec_s_2d;\n')
    _file_crc_rx_gen_line.write('        signal s_vec_s_3d : t_vec_s_3d := (others => (others => (others => \'0\')));\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        type t_mat_xored_2d is array(TUPLE_WIDTH downto 0) of std_logic_vector(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('        type t_mat_xored_3d is array(TUPLE_WIDTH-1 downto 0) of t_mat_xored_2d;\n')
    _file_crc_rx_gen_line.write('        type t_mat_xored_4d is array(TUPLES_CNT-1 downto 0) of t_mat_xored_3d;\n')
    _file_crc_rx_gen_line.write('        signal s_mat_xored_4d : t_mat_xored_4d := (others => (others => (others => (others => \'0\'))));\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        type t_mat_multiplied_2d is array(TUPLE_WIDTH-1 downto 0) of std_logic_vector(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('        type t_mat_multiplied_3d is array(TUPLE_WIDTH-1 downto 0) of t_mat_multiplied_2d;\n')
    _file_crc_rx_gen_line.write('        type t_mat_multiplied_4d is array(TUPLES_CNT-1 downto 0) of t_mat_multiplied_3d;\n')
    _file_crc_rx_gen_line.write('        signal s_mat_multiplied_4d : t_mat_multiplied_4d := (others => (others => (others => (others => \'0\'))));\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        -- Arrays of signals for sub-messages\n')
    _file_crc_rx_gen_line.write('        type t_vec_s_4d is array(SUBMESSAGES_CNT-1 downto 0) of t_vec_s_3d;\n')
    _file_crc_rx_gen_line.write('        signal s_vec_s_4d : t_vec_s_4d := (others => (others => (others => (others => \'0\'))));\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        type t_mat_xored_5d is array(SUBMESSAGES_CNT-1 downto 0) of t_mat_xored_4d;\n')
    _file_crc_rx_gen_line.write('        signal s_mat_xored_5d : t_mat_xored_5d := (others => (others => (others => (others => (others => \'0\')))));\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        type t_mat_multiplied_5d is array(SUBMESSAGES_CNT-1 downto 0) of t_mat_multiplied_4d;\n')
    _file_crc_rx_gen_line.write('        signal s_mat_multiplied_5d : t_mat_multiplied_5d := (others => (others => (others => (others => (others => \'0\')))));\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        type t_accumulated_crcs_2d is array(SUBMESSAGES_CNT-1 downto 0) of std_logic_vector(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('        signal s_accumulated_crcs_2d : t_accumulated_crcs_2d := (others => (others => \'0\'));\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        type t_xored_accumulated_crcs_2d is array(SUBMESSAGES_CNT downto 0) of std_logic_vector(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('        signal s_xored_accumulated_crcs_2d : t_xored_accumulated_crcs_2d := (others => (others => \'0\'));\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        -- Delay the calculation by placing set of registers per each parallel submessage (= to the tuple PLACE_REG_TUP_ARR(submsg_id))\n')
    _file_crc_rx_gen_line.write('        type t_place_registers_msg_2d is array(TUPLE_WIDTH-1 downto 0) of std_logic_vector(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('        type t_place_registers_msg_3d is array(REGS_SUBMSG_CNT-1 downto 0) of t_place_registers_msg_2d;\n')
    _file_crc_rx_gen_line.write('        type t_place_registers_msg_4d is array(SUBMESSAGES_CNT-1 downto 0) of t_place_registers_msg_3d;\n')
    _file_crc_rx_gen_line.write('        signal s_place_registers_msg_4d : t_place_registers_msg_4d := (others => (others => (others => (others => \'0\'))));\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        -- Generated numbers representing where to put registers in a single sub-message CRC calculation\n')
    _file_crc_rx_gen_line.write('        type t_place_reg_sym_tup_2d is array(SUBMESSAGES_CNT downto 0) of integer;\n')
    _file_crc_rx_gen_line.write('\n')
    if (_submessages_cnt > 1):
        _file_crc_rx_gen_line.write('        -- Uncomment if SUBMESSAGES_CNT > 1\n')
        _file_crc_rx_gen_line.write('        constant PLACE_REG_TUP_ARR : t_place_reg_sym_tup_2d := (0')
        # _list_tuplesids_insertregs = lib_ff.flatten_list(lib_crc.insert_registers_tuples(_int_symbol_width, _int_msg_symbols_cnt, _int_msg_tuplewidth, submessages_cnt, _list_in_msg_files))
        _list_tuplesids_insertregs = lib_ff.flatten_list(lib_crc.insert_registers_tuples(_int_symbol_width, _int_msg_symbols_cnt, _int_msg_tuplewidth, _submessages_cnt, _list_in_msg_files))
        for _r in range(len(_list_tuplesids_insertregs)):
            _file_crc_rx_gen_line.write(', ')
            _file_crc_rx_gen_line.write('{}'.format(_list_tuplesids_insertregs[_r]))
        _file_crc_rx_gen_line.write(');\n')
        _file_crc_rx_gen_line.write('        -- Uncomment if SUBMESSAGES_CNT = 1 (It must be written this way...)\n')
        _file_crc_rx_gen_line.write('        -- constant PLACE_REG_TUP_ARR : t_place_reg_sym_tup_2d := (0, 0);\n')
    elif (_submessages_cnt == 1):
        _file_crc_rx_gen_line.write('        -- Uncomment if SUBMESSAGES_CNT > 1\n')
        _file_crc_rx_gen_line.write('        -- constant PLACE_REG_TUP_ARR : t_place_reg_sym_tup_2d := ();\n')
        _file_crc_rx_gen_line.write('        -- Uncomment if SUBMESSAGES_CNT = 1 (It must be written this way...)\n')
        _file_crc_rx_gen_line.write('        -- constant PLACE_REG_TUP_ARR : t_place_reg_sym_tup_2d := (0, 0);\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        -- For each SUBMESSAGES_CNT and its respective TUPLES_CNT will be explicitly\n')
    _file_crc_rx_gen_line.write('        -- declared from which TAKE_DELAYED_INPUT(SUBMESSAGES_CNT)(TUPLES_CNT),\n')
    _file_crc_rx_gen_line.write('        -- (representing from which REGS_SUBMSG_CNT) take the input data within range(REGS_SUBMSG_CNT-1 downto 0)\n')
    _file_crc_rx_gen_line.write('        -- Example: pipeline 4x parallel lanes (4 submessages, 3 tuples)\n')
    _file_crc_rx_gen_line.write('        -- TAKE_DELAYED_INPUT for (0, 0, 1, 1, 2):\n')
    _file_crc_rx_gen_line.write('        -- (3): 0 => N/A \n')
    _file_crc_rx_gen_line.write('        -- (2): 0 => TAKE_DELAYED_INPUT(3) = (0,1,1)\n')
    _file_crc_rx_gen_line.write('        -- (1): 1 => TAKE_DELAYED_INPUT(2) = (0,1,1)\n')
    _file_crc_rx_gen_line.write('        -- (0): 1 => TAKE_DELAYED_INPUT(1) = (0,1,1)\n')
    _file_crc_rx_gen_line.write('        -- (0): 2 => TAKE_DELAYED_INPUT(0) = (0,0,1)\n')
    _file_crc_rx_gen_line.write('        type t_take_delayed_input_2d is array(TUPLES_CNT-1 downto 0) of integer;\n')
    _file_crc_rx_gen_line.write('        type t_take_delayed_input_3d is array(SUBMESSAGES_CNT-1 downto 0) of t_take_delayed_input_2d;\n')
    _file_crc_rx_gen_line.write('        constant TAKE_DELAYED_INPUT : t_take_delayed_input_3d := (')
    # _list_synch_input = lib_ff.mirror_list(lib_crc.synchronize_delayed_input(_int_symbol_width, _int_msg_symbols_cnt, _int_msg_tuplewidth, submessages_cnt, _list_in_msg_files))
    _list_synch_input = lib_ff.mirror_list(lib_crc.synchronize_delayed_input(_int_symbol_width, _int_msg_symbols_cnt, _int_msg_tuplewidth, _submessages_cnt, _list_in_msg_files))
    for _r in range(len(_list_synch_input)):
        if _r < len(_list_synch_input)-1:
            _file_crc_rx_gen_line.write('(')
            for _k in range(len(_list_synch_input[0])):
                if _k < (len(_list_synch_input[0])-1):
                    _file_crc_rx_gen_line.write('{},'.format(_list_synch_input[_r][_k]))
                if _k == (len(_list_synch_input[0])-1):
                    _file_crc_rx_gen_line.write('{}'.format(_list_synch_input[_r][_k]))
            _file_crc_rx_gen_line.write('),')
        if _r == len(_list_synch_input)-1:
            _file_crc_rx_gen_line.write('(')
            for _k in range(len(_list_synch_input[0])):
                if _k < (len(_list_synch_input[0])-1):
                    _file_crc_rx_gen_line.write('{},'.format(_list_synch_input[_r][_k]))
                if _k == (len(_list_synch_input[0])-1):
                    _file_crc_rx_gen_line.write('{}'.format(_list_synch_input[_r][_k]))
            _file_crc_rx_gen_line.write('));\n')
    _file_crc_rx_gen_line.write('\n')
    # _file_crc_rx_gen_line.write('        -- Arrays of signals for sub-messages\n')
    # _file_crc_rx_gen_line.write('        type t_submessages_2d is array(SUBMESSAGES_CNT-1 downto 0) of std_logic_vector(TUPLE_WIDTH*TUPLES_CNT*SYMBOL_WIDTH-1 downto 0);\n')
    # _file_crc_rx_gen_line.write('        signal s_submessages_2d : t_submessages_2d := (others => (others => \'0\'));\n')
    # _file_crc_rx_gen_line.write('\n')
    # _file_crc_rx_gen_line.write('        type t_vec_s_4d is array(SUBMESSAGES_CNT-1 downto 0) of t_vec_s_3d;\n')
    # _file_crc_rx_gen_line.write('        signal s_vec_s_4d : t_vec_s_4d := (others => (others => (others => (others => \'0\'))));\n')
    # _file_crc_rx_gen_line.write('\n')
    # _file_crc_rx_gen_line.write('        type t_mat_xored_5d is array(SUBMESSAGES_CNT-1 downto 0) of t_mat_xored_4d;\n')
    # _file_crc_rx_gen_line.write('        signal s_mat_xored_5d : t_mat_xored_5d := (others => (others => (others => (others => (others => \'0\')))));\n')
    # _file_crc_rx_gen_line.write('\n')
    # _file_crc_rx_gen_line.write('        type t_mat_multiplied_5d is array(SUBMESSAGES_CNT-1 downto 0) of t_mat_multiplied_4d;\n')
    # _file_crc_rx_gen_line.write('        signal s_mat_multiplied_5d : t_mat_multiplied_5d := (others => (others => (others => (others => (others => \'0\')))));\n')
    # _file_crc_rx_gen_line.write('\n')
    # _file_crc_rx_gen_line.write('        type t_accumulated_crcs_2d is array(SUBMESSAGES_CNT-1 downto 0) of std_logic_vector(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    # _file_crc_rx_gen_line.write('        signal s_accumulated_crcs_2d : t_accumulated_crcs_2d := (others => (others => \'0\'));\n')
    # _file_crc_rx_gen_line.write('\n')
    # _file_crc_rx_gen_line.write('        type t_xored_accumulated_crcs_2d is array(SUBMESSAGES_CNT downto 0) of std_logic_vector(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    # _file_crc_rx_gen_line.write('        signal s_xored_accumulated_crcs_2d : t_xored_accumulated_crcs_2d := (others => (others => \'0\'));\n')
    # _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    begin\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        --------------------------------------------------------------------------------\n')
    _file_crc_rx_gen_line.write('        --                            DELAYED INPUT MESSAGE                           --\n')
    _file_crc_rx_gen_line.write('        --------------------------------------------------------------------------------\n')
    _file_crc_rx_gen_line.write('        -- Distribution of input bits to the respective parallel lanes has already\n')
    _file_crc_rx_gen_line.write('        -- been done separately in each block of the double- or triple- parallel form\n')
    _file_crc_rx_gen_line.write('        -- Delaying the message only\n')
    _file_crc_rx_gen_line.write('        delaymsg_ifasynch: if SYNCH_DESIGN = false generate\n')
    _file_crc_rx_gen_line.write('            registers_levels : for r in 0 to REGS_SUBMSG_CNT generate\n')
    _file_crc_rx_gen_line.write('                if_submsg : if SUBMESSAGES_CNT = 1 generate\n')
    _file_crc_rx_gen_line.write('                    s_reg_submessages_3d(r+1)(0)(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0) <= s_reg_submessages_3d(r)(0)(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                if_submsgs : if SUBMESSAGES_CNT > 1 generate\n')
    _file_crc_rx_gen_line.write('                    regs_submessages : for s in 0 to SUBMESSAGES_CNT-1 generate\n')
    _file_crc_rx_gen_line.write('                        s_reg_submessages_3d(r+1)(s)(IN_DATA\'high-BITS_SUBMSG_START_2D(SUBMESSAGES_CNT-1-s) downto IN_DATA\'high-BITS_SUBMSG_END_2D(SUBMESSAGES_CNT-1-s)) <= s_reg_submessages_3d(r)(s)(IN_DATA\'high-BITS_SUBMSG_START_2D(SUBMESSAGES_CNT-1-s) downto IN_DATA\'high-BITS_SUBMSG_END_2D(SUBMESSAGES_CNT-1-s));\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('            end generate;\n')
    _file_crc_rx_gen_line.write('        end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        delaymsg_ifsynch: if SYNCH_DESIGN = true generate\n')
    _file_crc_rx_gen_line.write('            registers_levels : for r in 0 to REGS_SUBMSG_CNT generate\n')
    _file_crc_rx_gen_line.write('                if_submsg : if SUBMESSAGES_CNT = 1 generate\n')
    _file_crc_rx_gen_line.write('                    prc_reg_submsg : process(CLK)\n')
    _file_crc_rx_gen_line.write('                    begin\n')
    _file_crc_rx_gen_line.write('                        if rising_edge(CLK) then\n')
    _file_crc_rx_gen_line.write('                            s_reg_submessages_3d(r+1)(0)(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0) <= s_reg_submessages_3d(r)(0)(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                        end if;\n')
    _file_crc_rx_gen_line.write('                    end process;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                if_submsgs : if SUBMESSAGES_CNT > 1 generate\n')
    _file_crc_rx_gen_line.write('                    regs_submessages : for s in 0 to SUBMESSAGES_CNT-1 generate\n')
    _file_crc_rx_gen_line.write('                        prc_reg_submsg : process(CLK)\n')
    _file_crc_rx_gen_line.write('                        begin\n')
    _file_crc_rx_gen_line.write('                            if rising_edge(CLK) then\n')
    _file_crc_rx_gen_line.write('                                s_reg_submessages_3d(r+1)(s)(IN_DATA\'high-BITS_SUBMSG_START_2D(SUBMESSAGES_CNT-1-s) downto IN_DATA\'high-BITS_SUBMSG_END_2D(SUBMESSAGES_CNT-1-s)) <= s_reg_submessages_3d(r)(s)(IN_DATA\'high-BITS_SUBMSG_START_2D(SUBMESSAGES_CNT-1-s) downto IN_DATA\'high-BITS_SUBMSG_END_2D(SUBMESSAGES_CNT-1-s));\n')
    _file_crc_rx_gen_line.write('                            end if;\n')
    _file_crc_rx_gen_line.write('                        end process;\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('            end generate;\n')
    _file_crc_rx_gen_line.write('        end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        --------------------------------------------------------------------------------\n')
    _file_crc_rx_gen_line.write('        --                         DOUBLE-PARALLEL REALISATION                        --\n')
    _file_crc_rx_gen_line.write('        --------------------------------------------------------------------------------\n')
    _file_crc_rx_gen_line.write('        -- If no sub-messages are needed\n')
    _file_crc_rx_gen_line.write('        -- Note:\n')
    _file_crc_rx_gen_line.write('        --     SUBMESSAGES_CNT = 1 means a message it its own submessage\n')
    _file_crc_rx_gen_line.write('        --     SUBMESSAGES_CNT = 0 is not supported\n')
    _file_crc_rx_gen_line.write('        if_single_submessgae : if SUBMESSAGES_CNT = 1 generate\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('            -- Divide input IN_DATA into 0 sub-messages\n')
    _file_crc_rx_gen_line.write('            divided_inputs : for s in 0 to 0 generate\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                s_reg_submessages_3d(0)(0)(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0) <= IN_DATA(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                -- Initial Bitwise multiplication of the CHAR_MATRIX_A and a vector\n')
    _file_crc_rx_gen_line.write('                over_tuples_cnt : for t in TUPLES_CNT-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                    -- No multiplication is needed for the first time because of multiplying by 0 and xoring with input symbols\n')
    _file_crc_rx_gen_line.write('                    zero_redundant : if t = TUPLES_CNT-1 generate\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                        -- Insert registers here for better throughput\n')
    _file_crc_rx_gen_line.write('                        if_no_registers : if (REGS_SUBMSG_CNT = 0) or ((TUPLES_CNT-1-t) /= PLACE_REG_TUP_ARR(SUBMESSAGES_CNT-1-s)) generate\n')
    _file_crc_rx_gen_line.write('                            new_s : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                s_vec_s_3d(t)(j)(SYMBOL_WIDTH-1 downto 0) <= s_reg_submessages_3d(0)(0)((t*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (t*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)));\n')
    _file_crc_rx_gen_line.write('                            end generate;\n')
    _file_crc_rx_gen_line.write('                        end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                        -- ===== INSERTING REGISTERS =====\n')
    _file_crc_rx_gen_line.write('                        if_desired_tuple : if (REGS_SUBMSG_CNT > 0) and ((TUPLES_CNT-1-t) = PLACE_REG_TUP_ARR(SUBMESSAGES_CNT-1-s)) generate\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                            -- ===== REGISTERS = 1x =====\n')
    _file_crc_rx_gen_line.write('                            if_register_en : if REGS_SUBMSG_CNT = 1 generate\n')
    _file_crc_rx_gen_line.write('                                if_asynch_sim : if SYNCH_DESIGN = false generate\n')
    _file_crc_rx_gen_line.write('                                    to_reg : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                        s_place_registers_msg_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0) <= s_reg_submessages_3d(0)(0)((t*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (t*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)));\n')
    _file_crc_rx_gen_line.write('                                    end generate;\n')
    _file_crc_rx_gen_line.write('                                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                                if_synch_regs : if SYNCH_DESIGN = true generate\n')
    _file_crc_rx_gen_line.write('                                    to_reg : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                        proc_submsg_reg : process(CLK)\n')
    _file_crc_rx_gen_line.write('                                        begin\n')
    _file_crc_rx_gen_line.write('                                            if rising_edge(CLK) then\n')
    _file_crc_rx_gen_line.write('                                                s_place_registers_msg_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0) <= s_reg_submessages_3d(    TAKE_DELAYED_INPUT(0)(t)    )(0)((t*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (t*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)));\n')
    _file_crc_rx_gen_line.write('                                            end if;\n')
    _file_crc_rx_gen_line.write('                                        end process;\n')
    _file_crc_rx_gen_line.write('                                    end generate;\n')
    _file_crc_rx_gen_line.write('                                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                                new_s : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                    s_vec_s_3d(t)(j)(SYMBOL_WIDTH-1 downto 0) <= s_place_registers_msg_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                                end generate;\n')
    _file_crc_rx_gen_line.write('                            end generate;\n')
    _file_crc_rx_gen_line.write('                        end generate;\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                    -- Multiply characteristic matrix A by the previous "s_vec_s_3d" and xor the result with next tuple of input message symbols\n')
    _file_crc_rx_gen_line.write('                    nonzero_notredundant : if t < TUPLES_CNT-1 generate\n')
    _file_crc_rx_gen_line.write('                        mat_dim : for i in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                            vec_dim : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                inst_gfmult_constb : entity {}.gfmult_constb(rtl)\n'.format(str(_lib_src)))
    _file_crc_rx_gen_line.write('                                generic map (\n')
    _file_crc_rx_gen_line.write('                                    SYMBOL_WIDTH    => SYMBOL_WIDTH,\n')
    _file_crc_rx_gen_line.write('                                    PRIM_POLYNOMIAL => PRIM_POLY,\n')
    _file_crc_rx_gen_line.write('                                    CONST_B         => CHAR_MATRIX_A((i*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (i*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)))\n')
    _file_crc_rx_gen_line.write('                                )\n')
    _file_crc_rx_gen_line.write('                                port map (\n')
    _file_crc_rx_gen_line.write('                                    VAR_A => s_vec_s_3d(t+1)(j)(SYMBOL_WIDTH-1 downto 0),\n')
    _file_crc_rx_gen_line.write('                                    OUT_C => s_mat_multiplied_4d(t+1)(i)(j)(SYMBOL_WIDTH-1 downto 0)\n')
    _file_crc_rx_gen_line.write('                                );\n')
    _file_crc_rx_gen_line.write('                            end generate;\n')
    _file_crc_rx_gen_line.write('                        end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                        -- Inserting registers here would be better solution!! But the code would get too chaotic...\n')
    _file_crc_rx_gen_line.write('                        multiplied_elements_row : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                            add_multiplied_elements : for k in 0 to TUPLE_WIDTH-1 generate\n')
    _file_crc_rx_gen_line.write('                                s_mat_xored_4d(t+1)(j)(k+1)(SYMBOL_WIDTH-1 downto 0) <= s_mat_multiplied_4d(t+1)(j)(k)(SYMBOL_WIDTH-1 downto 0) xor s_mat_xored_4d(t+1)(j)(k)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                            end generate;\n')
    _file_crc_rx_gen_line.write('                        end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                        -- Insert registers here for better throughput\n')
    _file_crc_rx_gen_line.write('                        if_no_registers : if (REGS_SUBMSG_CNT = 0) or ((TUPLES_CNT-1-t) /= PLACE_REG_TUP_ARR(SUBMESSAGES_CNT-1-s)) generate\n')
    _file_crc_rx_gen_line.write('                            new_s : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                s_vec_s_3d(t)(j)(SYMBOL_WIDTH-1 downto 0) <= s_mat_xored_4d(t+1)(j)(TUPLE_WIDTH)(SYMBOL_WIDTH-1 downto 0) xor s_reg_submessages_3d(    TAKE_DELAYED_INPUT(0)(t)    )(0)((t*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (t*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)));\n')
    _file_crc_rx_gen_line.write('                            end generate;\n')
    _file_crc_rx_gen_line.write('                        end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                        -- ===== INSERTING REGISTERS =====\n')
    _file_crc_rx_gen_line.write('                        if_desired_tuple : if (REGS_SUBMSG_CNT > 0) and ((TUPLES_CNT-1-t) = PLACE_REG_TUP_ARR(SUBMESSAGES_CNT-1-s)) generate\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                            -- ===== REGISTERS = 1x =====\n')
    _file_crc_rx_gen_line.write('                            if_register_en : if REGS_SUBMSG_CNT = 1 generate\n')
    _file_crc_rx_gen_line.write('                                if_asynch_sim : if SYNCH_DESIGN = false generate\n')
    _file_crc_rx_gen_line.write('                                    to_reg : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                        s_place_registers_msg_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0) <= s_mat_xored_4d(t+1)(j)(TUPLE_WIDTH)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                                    end generate;\n')
    _file_crc_rx_gen_line.write('                                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                                if_synch_regs : if SYNCH_DESIGN = true generate\n')
    _file_crc_rx_gen_line.write('                                    to_reg : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                        proc_submsg_reg : process(CLK)\n')
    _file_crc_rx_gen_line.write('                                        begin\n')
    _file_crc_rx_gen_line.write('                                            if rising_edge(CLK) then\n')
    _file_crc_rx_gen_line.write('                                                s_place_registers_msg_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0) <= s_mat_xored_4d(t+1)(j)(TUPLE_WIDTH)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                                            end if;\n')
    _file_crc_rx_gen_line.write('                                        end process;\n')
    _file_crc_rx_gen_line.write('                                    end generate;\n')
    _file_crc_rx_gen_line.write('                                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                                new_s : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                    s_vec_s_3d(t)(j)(SYMBOL_WIDTH-1 downto 0) <= s_place_registers_msg_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0) xor s_reg_submessages_3d(    TAKE_DELAYED_INPUT(0)(t)    )(0)((t*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (t*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)));\n')
    _file_crc_rx_gen_line.write('                                end generate;\n')
    _file_crc_rx_gen_line.write('                            end generate;\n')
    _file_crc_rx_gen_line.write('                        end generate;\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                -- Last step: Multiply Characteristic matrix A by the previous "s_vec_s_3d"\n')
    _file_crc_rx_gen_line.write('                mat_dim : for i in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                    vec_dim : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                        inst_gfmult_constb : entity {}.gfmult_constb(rtl)\n'.format(str(_lib_src)))
    _file_crc_rx_gen_line.write('                            generic map (\n')
    _file_crc_rx_gen_line.write('                                SYMBOL_WIDTH    => SYMBOL_WIDTH,\n')
    _file_crc_rx_gen_line.write('                                PRIM_POLYNOMIAL => PRIM_POLY,\n')
    _file_crc_rx_gen_line.write('                                CONST_B         => CHAR_MATRIX_A((i*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (i*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)))\n')
    _file_crc_rx_gen_line.write('                            )\n')
    _file_crc_rx_gen_line.write('                            port map (\n')
    _file_crc_rx_gen_line.write('                                VAR_A => s_vec_s_3d(0)(j)(SYMBOL_WIDTH-1 downto 0),\n')
    _file_crc_rx_gen_line.write('                                OUT_C => s_mat_multiplied_4d(0)(i)(j)(SYMBOL_WIDTH-1 downto 0)\n')
    _file_crc_rx_gen_line.write('                        );\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                -- This can be redone for better throughput\n')
    _file_crc_rx_gen_line.write('                last_multiplied_elements_row : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                    last_add_multiplied_elements : for k in 0 to TUPLE_WIDTH-1 generate\n')
    _file_crc_rx_gen_line.write('                        s_mat_xored_4d(0)(j)(k+1)(SYMBOL_WIDTH-1 downto 0) <= s_mat_multiplied_4d(0)(j)(k)(SYMBOL_WIDTH-1 downto 0) xor s_mat_xored_4d(0)(j)(k)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                -- If synchronous output selected\n')
    _file_crc_rx_gen_line.write('                synch_out : if SYNCH_DESIGN = true generate\n')
    _file_crc_rx_gen_line.write('                    output_crc_reg : for j in 0 to TUPLE_WIDTH-1 generate\n')
    _file_crc_rx_gen_line.write('                        crc_rx_reg_out : process(CLK)\n')
    _file_crc_rx_gen_line.write('                        begin\n')
    _file_crc_rx_gen_line.write('                            if rising_edge(CLK) then\n')
    _file_crc_rx_gen_line.write('                                OUT_SYN(((j+1)*(SYMBOL_WIDTH))-1 downto (j*(SYMBOL_WIDTH))) <= s_mat_xored_4d(0)(j)(TUPLE_WIDTH)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                            end if;\n')
    _file_crc_rx_gen_line.write('                        end process;\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                -- If asynchronous output selected\n')
    _file_crc_rx_gen_line.write('                asynch_out : if SYNCH_DESIGN = false generate\n')
    _file_crc_rx_gen_line.write('                    output_crc : for j in 0 to TUPLE_WIDTH-1 generate\n')
    _file_crc_rx_gen_line.write('                        OUT_SYN(((j+1)*(SYMBOL_WIDTH))-1 downto (j*(SYMBOL_WIDTH))) <= s_mat_xored_4d(0)(j)(TUPLE_WIDTH)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('            end generate;\n')
    _file_crc_rx_gen_line.write('        end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('        --------------------------------------------------------------------------------\n')
    _file_crc_rx_gen_line.write('        --                         TRIPLE-PARALLEL REALISATION                        --\n')
    _file_crc_rx_gen_line.write('        --------------------------------------------------------------------------------\n')
    _file_crc_rx_gen_line.write('        -- If the input message "IN_DATA" is divided into separate parallel sub-messages\n')
    _file_crc_rx_gen_line.write('        if_more_sumbessages : if SUBMESSAGES_CNT > 1 generate\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('            -- Divide input IN_DATA into "SUBMESSAGES_CNT" sub-messages\n')
    _file_crc_rx_gen_line.write('            divided_inputs : for s in 0 to SUBMESSAGES_CNT-1 generate\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                s_reg_submessages_3d(0)(s)(IN_DATA\'high-BITS_SUBMSG_START_2D(SUBMESSAGES_CNT-1-s) downto IN_DATA\'high-BITS_SUBMSG_END_2D(SUBMESSAGES_CNT-1-s)) <= IN_DATA(IN_DATA\'high-BITS_SUBMSG_START_2D(SUBMESSAGES_CNT-1-s) downto IN_DATA\'high-BITS_SUBMSG_END_2D(SUBMESSAGES_CNT-1-s));\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                -- Initial Bitwise multiplication of the CHAR_MATRIX_A and a vector\n')
    _file_crc_rx_gen_line.write('                over_tuples_cnt : for t in TUPLES_CNT-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                    -- No multiplication is needed for the first time because of multiplying by 0 and xoring with input symbols\n')
    _file_crc_rx_gen_line.write('                    zero_redundant : if t = TUPLES_CNT-1 generate\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                        -- Insert registers here for better throughput\n')
    _file_crc_rx_gen_line.write('                        if_no_registers : if (REGS_SUBMSG_CNT = 0) or ((TUPLES_CNT-1-t) /= PLACE_REG_TUP_ARR(SUBMESSAGES_CNT-1-s)) generate\n')
    _file_crc_rx_gen_line.write('                            avoid_redundancy : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                s_vec_s_4d(s)(t)(j)(SYMBOL_WIDTH-1 downto 0) <= s_reg_submessages_3d(0)(s)((t*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (t*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)));\n')
    _file_crc_rx_gen_line.write('                            end generate;\n')
    _file_crc_rx_gen_line.write('                        end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                        -- ===== INSERTING REGISTERS: RELYING ON REGISTER RETIMING =====\n')
    _file_crc_rx_gen_line.write('                        if_desired_tuple : if (REGS_SUBMSG_CNT > 0) and ((TUPLES_CNT-1-t) = PLACE_REG_TUP_ARR(SUBMESSAGES_CNT-1-s)) generate\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                            -- ===== REGISTERS = 1x =====\n')
    _file_crc_rx_gen_line.write('                            if_register_en : if REGS_SUBMSG_CNT = 1 generate\n')
    _file_crc_rx_gen_line.write('                                if_asynch_sim : if SYNCH_DESIGN = false generate\n')
    _file_crc_rx_gen_line.write('                                    to_reg : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                        s_place_registers_msg_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0) <= s_reg_submessages_3d(    TAKE_DELAYED_INPUT(s)(t)    )(s)((t*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (t*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)));\n')
    _file_crc_rx_gen_line.write('                                    end generate;\n')
    _file_crc_rx_gen_line.write('                                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                                if_synch_regs : if SYNCH_DESIGN = true generate\n')
    _file_crc_rx_gen_line.write('                                    to_reg : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                        proc_submsg_reg : process(CLK)\n')
    _file_crc_rx_gen_line.write('                                        begin\n')
    _file_crc_rx_gen_line.write('                                            if rising_edge(CLK) then\n')
    _file_crc_rx_gen_line.write('                                                s_place_registers_msg_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0) <= s_reg_submessages_3d(    TAKE_DELAYED_INPUT(s)(t)    )(s)((t*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (t*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)));\n')
    _file_crc_rx_gen_line.write('                                            end if;\n')
    _file_crc_rx_gen_line.write('                                        end process;\n')
    _file_crc_rx_gen_line.write('                                    end generate;\n')
    _file_crc_rx_gen_line.write('                                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                                new_s : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                    s_vec_s_4d(s)(t)(j)(SYMBOL_WIDTH-1 downto 0) <= s_place_registers_msg_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                                end generate;\n')
    _file_crc_rx_gen_line.write('                            end generate;\n')
    _file_crc_rx_gen_line.write('                        end generate;\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                    -- Multiply characteristic matrix A by the previous "s_vec_s_4d" and xor the result with next tuple of input message symbols\n')
    _file_crc_rx_gen_line.write('                    nonzero_notredundant : if t < TUPLES_CNT-1 generate\n')
    _file_crc_rx_gen_line.write('                        mat_dim : for i in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                            vec_dim : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                inst_gfmult_constb : entity {}.gfmult_constb(rtl)\n'.format(str(_lib_src)))
    _file_crc_rx_gen_line.write('                                generic map (\n')
    _file_crc_rx_gen_line.write('                                    SYMBOL_WIDTH    => SYMBOL_WIDTH,\n')
    _file_crc_rx_gen_line.write('                                    PRIM_POLYNOMIAL => PRIM_POLY,\n')
    _file_crc_rx_gen_line.write('                                    CONST_B         => CHAR_MATRIX_A((i*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (i*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)))\n')
    _file_crc_rx_gen_line.write('                                )\n')
    _file_crc_rx_gen_line.write('                                port map (\n')
    _file_crc_rx_gen_line.write('                                    VAR_A => s_vec_s_4d(s)(t+1)(j)(SYMBOL_WIDTH-1 downto 0),\n')
    _file_crc_rx_gen_line.write('                                    OUT_C => s_mat_multiplied_5d(s)(t+1)(i)(j)(SYMBOL_WIDTH-1 downto 0)\n')
    _file_crc_rx_gen_line.write('                                );\n')
    _file_crc_rx_gen_line.write('                            end generate;\n')
    _file_crc_rx_gen_line.write('                        end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                        multiplied_elements_row : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                            add_multiplied_elements : for k in 0 to TUPLE_WIDTH-1 generate\n')
    _file_crc_rx_gen_line.write('                                s_mat_xored_5d(s)(t+1)(j)(k+1)(SYMBOL_WIDTH-1 downto 0) <= s_mat_multiplied_5d(s)(t+1)(j)(k)(SYMBOL_WIDTH-1 downto 0) xor s_mat_xored_5d(s)(t+1)(j)(k)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                            end generate;\n')
    _file_crc_rx_gen_line.write('                        end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                        -- Insert registers here for better throughput\n')
    _file_crc_rx_gen_line.write('                        if_no_registers : if (REGS_SUBMSG_CNT = 0) or ((TUPLES_CNT-1-t) /= PLACE_REG_TUP_ARR(SUBMESSAGES_CNT-1-s)) generate\n')
    _file_crc_rx_gen_line.write('                            new_s : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                s_vec_s_4d(s)(t)(j)(SYMBOL_WIDTH-1 downto 0) <= s_mat_xored_5d(s)(t+1)(j)(TUPLE_WIDTH)(SYMBOL_WIDTH-1 downto 0) xor s_reg_submessages_3d(    TAKE_DELAYED_INPUT(s)(t)    )(s)((t*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (t*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)));\n')
    _file_crc_rx_gen_line.write('                            end generate;\n')
    _file_crc_rx_gen_line.write('                        end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                        -- ===== INSERTING REGISTERS =====\n')
    _file_crc_rx_gen_line.write('                        if_desired_tuple : if (REGS_SUBMSG_CNT > 0) and ((TUPLES_CNT-1-t) = PLACE_REG_TUP_ARR(SUBMESSAGES_CNT-1-s)) generate\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                            -- ===== REGISTERS = 1x =====\n')
    _file_crc_rx_gen_line.write('                            if_register_en : if REGS_SUBMSG_CNT = 1 generate\n')
    _file_crc_rx_gen_line.write('                                if_asynch_sim : if SYNCH_DESIGN = false generate\n')
    _file_crc_rx_gen_line.write('                                    to_reg : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                        s_place_registers_msg_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0) <= s_mat_xored_5d(s)(t+1)(j)(TUPLE_WIDTH)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                                    end generate;\n')
    _file_crc_rx_gen_line.write('                                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                                if_synch_regs : if SYNCH_DESIGN = true generate\n')
    _file_crc_rx_gen_line.write('                                    to_reg : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                        proc_submsg_reg : process(CLK)\n')
    _file_crc_rx_gen_line.write('                                        begin\n')
    _file_crc_rx_gen_line.write('                                            if rising_edge(CLK) then\n')
    _file_crc_rx_gen_line.write('                                                s_place_registers_msg_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0) <= s_mat_xored_5d(s)(t+1)(j)(TUPLE_WIDTH)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                                            end if;\n')
    _file_crc_rx_gen_line.write('                                        end process;\n')
    _file_crc_rx_gen_line.write('                                    end generate;\n')
    _file_crc_rx_gen_line.write('                                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                                new_s : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                                    s_vec_s_4d(s)(t)(j)(SYMBOL_WIDTH-1 downto 0) <= s_place_registers_msg_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0) xor s_reg_submessages_3d(    TAKE_DELAYED_INPUT(s)(t)    )(s)((t*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (t*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)));\n')
    _file_crc_rx_gen_line.write('                                end generate;\n')
    _file_crc_rx_gen_line.write('                            end generate;\n')
    _file_crc_rx_gen_line.write('                        end generate;\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                -- Last step: Multiply Characteristic matrix A by the previous "s_vec_s_4d"\n')
    _file_crc_rx_gen_line.write('                mat_dim : for i in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                    vec_dim : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                        inst_gfmult_constb : entity {}.gfmult_constb(rtl)\n'.format(str(_lib_src)))
    _file_crc_rx_gen_line.write('                        generic map (\n')
    _file_crc_rx_gen_line.write('                            SYMBOL_WIDTH    => SYMBOL_WIDTH,\n')
    _file_crc_rx_gen_line.write('                            PRIM_POLYNOMIAL => PRIM_POLY,\n')
    _file_crc_rx_gen_line.write('                            CONST_B         => CHAR_MATRIX_A((i*TUPLE_WIDTH*SYMBOL_WIDTH)+((j+1)*(SYMBOL_WIDTH))-1 downto (i*TUPLE_WIDTH*SYMBOL_WIDTH)+(j*(SYMBOL_WIDTH)))\n')
    _file_crc_rx_gen_line.write('                        )\n')
    _file_crc_rx_gen_line.write('                        port map (\n')
    _file_crc_rx_gen_line.write('                            VAR_A => s_vec_s_4d(s)(0)(j)(SYMBOL_WIDTH-1 downto 0),\n')
    _file_crc_rx_gen_line.write('                            OUT_C => s_mat_multiplied_5d(s)(0)(i)(j)(SYMBOL_WIDTH-1 downto 0)\n')
    _file_crc_rx_gen_line.write('                        );\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                -- This can be redone for better throughput\n')
    _file_crc_rx_gen_line.write('                last_multiplied_elements_row : for j in TUPLE_WIDTH-1 downto 0 generate\n')
    _file_crc_rx_gen_line.write('                    last_add_multiplied_elements : for k in 0 to TUPLE_WIDTH-1 generate\n')
    _file_crc_rx_gen_line.write('                        s_mat_xored_5d(s)(0)(j)(k+1)(SYMBOL_WIDTH-1 downto 0) <= s_mat_multiplied_5d(s)(0)(j)(k)(SYMBOL_WIDTH-1 downto 0) xor s_mat_xored_5d(s)(0)(j)(k)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                -- No registers before accumulated separate parallel parities get xored (Asynchronous realization)\n')
    _file_crc_rx_gen_line.write('                asynch_acc : if SYNCH_DESIGN = false generate\n')
    _file_crc_rx_gen_line.write('                    asynch_accumulate_crcs : for j in 0 to TUPLE_WIDTH-1 generate\n')
    _file_crc_rx_gen_line.write('                        s_accumulated_crcs_2d(s)(((j+1)*(SYMBOL_WIDTH))-1 downto (j*(SYMBOL_WIDTH))) <= s_mat_xored_5d(s)(0)(j)(TUPLE_WIDTH)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                -- Insert registers here before accumulating (xoring) separate parallel parities (Synchronous realization)\n')
    _file_crc_rx_gen_line.write('                synch_acc : if SYNCH_DESIGN = true generate\n')
    _file_crc_rx_gen_line.write('                    synch_accumulate_crcs : for j in 0 to TUPLE_WIDTH-1 generate\n')
    _file_crc_rx_gen_line.write('                        crc_reg_parities : process(CLK)\n')
    _file_crc_rx_gen_line.write('                        begin\n')
    _file_crc_rx_gen_line.write('                            if rising_edge(CLK) then\n')
    _file_crc_rx_gen_line.write('                                s_accumulated_crcs_2d(s)(((j+1)*(SYMBOL_WIDTH))-1 downto (j*(SYMBOL_WIDTH))) <= s_mat_xored_5d(s)(0)(j)(TUPLE_WIDTH)(SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('                            end if;\n')
    _file_crc_rx_gen_line.write('                        end process;\n')
    _file_crc_rx_gen_line.write('                    end generate;\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('            end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('            -- Xor accumulated parities calculated above in "s_accumulated_crcs_2d"\n')
    _file_crc_rx_gen_line.write('            xor_accumulated_sub_crcs : for s in 0 to SUBMESSAGES_CNT-1 generate\n')
    _file_crc_rx_gen_line.write('                s_xored_accumulated_crcs_2d(s+1)(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0) <= s_accumulated_crcs_2d(s)(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0) xor s_xored_accumulated_crcs_2d(s)(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('            end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('            -- If synchronous output selected\n')
    _file_crc_rx_gen_line.write('            synch_out : if SYNCH_DESIGN = true generate\n')
    _file_crc_rx_gen_line.write('                -- CRC and Message output\n')
    _file_crc_rx_gen_line.write('                crc_reg_parities : process(CLK)\n')
    _file_crc_rx_gen_line.write('                begin\n')
    _file_crc_rx_gen_line.write('                    if rising_edge(CLK) then\n')
    _file_crc_rx_gen_line.write('                        OUT_SYN(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0) <= s_xored_accumulated_crcs_2d(SUBMESSAGES_CNT)(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                        divided_inputs_merge : for s in 0 to SUBMESSAGES_CNT-1 loop\n')
    _file_crc_rx_gen_line.write('                            OUT_MSG(IN_DATA\'high-BITS_SUBMSG_START_2D(SUBMESSAGES_CNT-1-s) downto IN_DATA\'high-BITS_SUBMSG_END_2D(SUBMESSAGES_CNT-1-s)) <= s_reg_submessages_3d(REGS_SUBMSG_CNT+1)(s)(IN_DATA\'high-BITS_SUBMSG_START_2D(SUBMESSAGES_CNT-1-s) downto IN_DATA\'high-BITS_SUBMSG_END_2D(SUBMESSAGES_CNT-1-s));\n')
    _file_crc_rx_gen_line.write('                        end loop;\n')
    _file_crc_rx_gen_line.write('                    end if;\n')
    _file_crc_rx_gen_line.write('                end process;\n')
    # _file_crc_rx_gen_line.write('\n')
    # _file_crc_rx_gen_line.write('                -- Message out\n')
    # _file_crc_rx_gen_line.write('                -- msg_reg_out : process(CLK)\n')
    # _file_crc_rx_gen_line.write('                -- begin\n')
    # _file_crc_rx_gen_line.write('                --     -- CRC out\n')
    # _file_crc_rx_gen_line.write('                --     if rising_edge(CLK) then\n')
    # _file_crc_rx_gen_line.write('                --         OUT_SYN(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0) <= s_xored_accumulated_crcs_2d(SUBMESSAGES_CNT)(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    # _file_crc_rx_gen_line.write('                --     end if;\n')
    # _file_crc_rx_gen_line.write('                -- end process;\n')
    # _file_crc_rx_gen_line.write('\n')
    # _file_crc_rx_gen_line.write('                -- MSG out\n')
    # _file_crc_rx_gen_line.write('                -- divided_inputs_merge : for s in 0 to SUBMESSAGES_CNT-1 loop\n')
    # _file_crc_rx_gen_line.write('                --     OUT_MSG(IN_DATA\'high-BITS_SUBMSG_START_2D(SUBMESSAGES_CNT-1-s) downto IN_DATA\'high-BITS_SUBMSG_END_2D(SUBMESSAGES_CNT-1-s)) <= s_reg_submessages_3d(1+REGS_SUBMSG_CNT+1)(s)(IN_DATA\'high-BITS_SUBMSG_START_2D(SUBMESSAGES_CNT-1-s) downto IN_DATA\'high-BITS_SUBMSG_END_2D(SUBMESSAGES_CNT-1-s));\n')
    # _file_crc_rx_gen_line.write('                -- end loop;\n')
    _file_crc_rx_gen_line.write('            end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('            -- If asynchronous output selected\n')
    _file_crc_rx_gen_line.write('            asynch_out : if SYNCH_DESIGN = false generate\n')
    _file_crc_rx_gen_line.write('                -- CRC out\n')
    _file_crc_rx_gen_line.write('                OUT_SYN(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0) <= s_xored_accumulated_crcs_2d(SUBMESSAGES_CNT)(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('                -- Message out\n')
    _file_crc_rx_gen_line.write('                divided_inputs_merge : for s in 0 to SUBMESSAGES_CNT-1 generate\n')
    _file_crc_rx_gen_line.write('                    OUT_MSG(IN_DATA\'high-BITS_SUBMSG_START_2D(SUBMESSAGES_CNT-1-s) downto IN_DATA\'high-BITS_SUBMSG_END_2D(SUBMESSAGES_CNT-1-s)) <= s_reg_submessages_3d(1+REGS_SUBMSG_CNT+1)(s)(IN_DATA\'high-BITS_SUBMSG_START_2D(SUBMESSAGES_CNT-1-s) downto IN_DATA\'high-BITS_SUBMSG_END_2D(SUBMESSAGES_CNT-1-s));\n')
    _file_crc_rx_gen_line.write('                end generate;\n')
    _file_crc_rx_gen_line.write('            end generate;\n')
    _file_crc_rx_gen_line.write('        end generate;\n')
    _file_crc_rx_gen_line.write('\n')
    _file_crc_rx_gen_line.write('    end architecture;')
    _file_crc_rx_gen_line.close()

    # ---- VHDL WRAPPER ----
    _file_wrapped_crc_rx_gen_name = 'wrapper_rx_crc_symtuppar.vhd'
    # _file_wrapped_crc_rx_gen_fullpath = ('{0}\\{1}'.format(_rx_dir, _file_wrapped_crc_rx_gen_name))
    _file_wrapped_crc_rx_gen_fullpath = ('{0}{1}{2}'.format(_rx_dir, _delimiter, _file_wrapped_crc_rx_gen_name))
    # _file_crc_rx_gen_fullpath = ('{0}{1}{2}'.format(_rx_dir, _delimiter, _file_crc_rx_gen_name))
    print('new file', _file_wrapped_crc_rx_gen_name,'created: ', _file_wrapped_crc_rx_gen_fullpath)
    _file_wrapped_crc_rx_gen_line = open(_file_wrapped_crc_rx_gen_fullpath, 'w')

    _file_wrapped_crc_rx_gen_line.write('    -- This file wraps the main file "rx_crc_symtuppar"\n')
    _file_wrapped_crc_rx_gen_line.write('    -- Engineer: Patrik Zahalka (patrik.zahalka@univie.ac.at; zahalka.patrik@gmail.com)\n')
    _file_wrapped_crc_rx_gen_line.write('    -- Year: 2021\n')
    _file_wrapped_crc_rx_gen_line.write('\n')
    _file_wrapped_crc_rx_gen_line.write('    library ieee;\n')
    _file_wrapped_crc_rx_gen_line.write('    use ieee.std_logic_1164.all;\n')
    _file_wrapped_crc_rx_gen_line.write('    use ieee.numeric_std.all;\n')
    _file_wrapped_crc_rx_gen_line.write('\n')
    _file_wrapped_crc_rx_gen_line.write('    library {};\n'.format(str(_lib_src)))
    _file_wrapped_crc_rx_gen_line.write('\n')
    _file_wrapped_crc_rx_gen_line.write('    entity wrapper_rx_crc_symtuppar is\n')
    _file_wrapped_crc_rx_gen_line.write('        generic (\n')
    _file_wrapped_crc_rx_gen_line.write('            SYMBOL_WIDTH    : integer := ')
    _file_wrapped_crc_rx_gen_line.write('{}'.format(_int_symbol_width))
    _file_wrapped_crc_rx_gen_line.write(';\n')
    _file_wrapped_crc_rx_gen_line.write('            MSG_SYMBOLS     : integer := ')
    _file_wrapped_crc_rx_gen_line.write('{}'.format(_int_msg_symbols_cnt))
    _file_wrapped_crc_rx_gen_line.write(';\n')
    _file_wrapped_crc_rx_gen_line.write('            ZEROS_ADDED     : integer := ')
    _file_wrapped_crc_rx_gen_line.write('{}'.format(_cnt_new_bits_added))
    _file_wrapped_crc_rx_gen_line.write(';\n')
    _file_wrapped_crc_rx_gen_line.write('            TUPLE_WIDTH     : integer := ')
    _file_wrapped_crc_rx_gen_line.write('{}'.format(_int_msg_tuplewidth))
    _file_wrapped_crc_rx_gen_line.write(';\n')
    _file_wrapped_crc_rx_gen_line.write('            TUPLES_CNT      : integer := ')
    _file_wrapped_crc_rx_gen_line.write('{}'.format(int(_int_msg_parts)))
    _file_wrapped_crc_rx_gen_line.write(';\n')
    _file_wrapped_crc_rx_gen_line.write('            SUBMESSAGES_CNT : integer := ')
    _file_wrapped_crc_rx_gen_line.write('{}'.format(_submessages_cnt))
    _file_wrapped_crc_rx_gen_line.write(';\n')
    _file_wrapped_crc_rx_gen_line.write('            SYNCH_DESIGN    : boolean := true;\n')
    _file_wrapped_crc_rx_gen_line.write('            REGS_SUBMSG_CNT : integer := 1\n')
    _file_wrapped_crc_rx_gen_line.write('        );\n')
    _file_wrapped_crc_rx_gen_line.write('        port (\n')
    _file_wrapped_crc_rx_gen_line.write('            CLK             : in  std_logic;\n')
    _file_wrapped_crc_rx_gen_line.write('            OUT_WRAPPER_CRC : out std_logic_vector(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    _file_wrapped_crc_rx_gen_line.write('            OUT_WRAPPER_MSG : out std_logic_vector(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0)\n')
    _file_wrapped_crc_rx_gen_line.write('        );\n')
    _file_wrapped_crc_rx_gen_line.write('    end wrapper_rx_crc_symtuppar;\n')
    _file_wrapped_crc_rx_gen_line.write('\n')
    _file_wrapped_crc_rx_gen_line.write('    architecture rtl of wrapper_rx_crc_symtuppar is\n')
    _file_wrapped_crc_rx_gen_line.write('\n')
    _file_wrapped_crc_rx_gen_line.write('        -- Precalculate initial values for the shift register\n')
    _file_wrapped_crc_rx_gen_line.write('        function wrapper_counter_symbols (MAX_NUMBER : in integer) return std_logic_vector is\n')
    _file_wrapped_crc_rx_gen_line.write('            variable v_shift_wrapper : std_logic_vector(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0) := (others => \'0\');\n')
    _file_wrapped_crc_rx_gen_line.write('        begin\n')
    _file_wrapped_crc_rx_gen_line.write('            for i in 0 to MAX_NUMBER-1 loop\n')
    _file_wrapped_crc_rx_gen_line.write('                v_shift_wrapper(v_shift_wrapper\'high-((i)*SYMBOL_WIDTH) downto v_shift_wrapper\'high+1-((i+1)*SYMBOL_WIDTH)) := std_logic_vector(to_unsigned(i, SYMBOL_WIDTH));\n')
    _file_wrapped_crc_rx_gen_line.write('            end loop;\n')
    _file_wrapped_crc_rx_gen_line.write('            return v_shift_wrapper(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0);\n')
    _file_wrapped_crc_rx_gen_line.write('        end function;\n')
    _file_wrapped_crc_rx_gen_line.write('\n')
    _file_wrapped_crc_rx_gen_line.write('        signal reg_shift_wrapper : std_logic_vector(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0) := wrapper_counter_symbols(MSG_SYMBOLS);\n')
    _file_wrapped_crc_rx_gen_line.write('\n')
    _file_wrapped_crc_rx_gen_line.write('    begin\n')
    _file_wrapped_crc_rx_gen_line.write('\n')
    _file_wrapped_crc_rx_gen_line.write('        -- Shift register\n')
    _file_wrapped_crc_rx_gen_line.write('        wrapper_shift_reg : process(CLK)\n')
    _file_wrapped_crc_rx_gen_line.write('        begin\n')
    _file_wrapped_crc_rx_gen_line.write('            if rising_edge(CLK) then\n')
    _file_wrapped_crc_rx_gen_line.write('                -- Uncomment for bit shift\n')
    _file_wrapped_crc_rx_gen_line.write('                -- reg_shift_wrapper(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0) <= reg_shift_wrapper(MSG_SYMBOLS*SYMBOL_WIDTH-2 downto 0) & reg_shift_wrapper(MSG_SYMBOLS*SYMBOL_WIDTH-1);\n')
    _file_wrapped_crc_rx_gen_line.write('                -- Uncomment for symbol shift\n')
    _file_wrapped_crc_rx_gen_line.write('                reg_shift_wrapper(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0) <= reg_shift_wrapper(MSG_SYMBOLS*SYMBOL_WIDTH-1-SYMBOL_WIDTH downto 0) & reg_shift_wrapper(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto MSG_SYMBOLS*SYMBOL_WIDTH-SYMBOL_WIDTH);\n')
    _file_wrapped_crc_rx_gen_line.write('            end if;\n')
    _file_wrapped_crc_rx_gen_line.write('        end process;\n')
    _file_wrapped_crc_rx_gen_line.write('\n')
    _file_wrapped_crc_rx_gen_line.write('        --  Instantiate the entity "rx_crc_symtuppar", send data and retrieve "OUT_SYN"\n')
    _file_wrapped_crc_rx_gen_line.write('        inst_rx_crc_symtuppar : entity {}.rx_crc_symtuppar(rtl)\n'.format(str(_lib_src)))
    _file_wrapped_crc_rx_gen_line.write('        generic map (\n')
    _file_wrapped_crc_rx_gen_line.write('            SYMBOL_WIDTH    => SYMBOL_WIDTH,\n')
    _file_wrapped_crc_rx_gen_line.write('            MSG_SYMBOLS     => MSG_SYMBOLS,\n')
    _file_wrapped_crc_rx_gen_line.write('            ZEROS_ADDED     => ZEROS_ADDED,\n')
    _file_wrapped_crc_rx_gen_line.write('            TUPLE_WIDTH     => TUPLE_WIDTH,\n')
    _file_wrapped_crc_rx_gen_line.write('            TUPLES_CNT      => TUPLES_CNT,\n')
    _file_wrapped_crc_rx_gen_line.write('            SUBMESSAGES_CNT => SUBMESSAGES_CNT,\n')
    _file_wrapped_crc_rx_gen_line.write('            SYNCH_DESIGN    => SYNCH_DESIGN,\n')
    _file_wrapped_crc_rx_gen_line.write('            REGS_SUBMSG_CNT => REGS_SUBMSG_CNT\n')
    _file_wrapped_crc_rx_gen_line.write('        )\n')
    _file_wrapped_crc_rx_gen_line.write('        port map (\n')
    _file_wrapped_crc_rx_gen_line.write('            CLK     => CLK,\n')
    _file_wrapped_crc_rx_gen_line.write('            IN_DATA => reg_shift_wrapper,\n')
    _file_wrapped_crc_rx_gen_line.write('            OUT_SYN => OUT_WRAPPER_CRC,\n')
    _file_wrapped_crc_rx_gen_line.write('            OUT_MSG => OUT_WRAPPER_MSG\n')
    _file_wrapped_crc_rx_gen_line.write('        );\n')
    _file_wrapped_crc_rx_gen_line.write('\n')
    _file_wrapped_crc_rx_gen_line.write('    end architecture;')
    _file_wrapped_crc_rx_gen_line.close()



    # ----- VHDL TESTBENCH -----
    # In .csv file helpers
    _file_tb_rx_crc_symtuppar_datain_name = 'rx_crc_symtuppar_datain_tb.csv'
    # _file_tb_rx_crc_symtuppar_datain_fullpath = ('{0}\\{1}'.format(_rx_dir, _file_tb_rx_crc_symtuppar_datain_name))
    _file_tb_rx_crc_symtuppar_datain_fullpath = ('{0}{1}{2}'.format(_rx_dir, _delimiter, _file_tb_rx_crc_symtuppar_datain_name))
    # _file_gfmult_constb_fullpath = ('{0}{1}{2}'.format(_rx_dir, _delimiter, _file_gfmult_constb_name))
    print('new file', _file_tb_rx_crc_symtuppar_datain_name,'created: ', _file_tb_rx_crc_symtuppar_datain_fullpath)
    _file_tb_rx_crc_symtuppar_datain_line = open(_file_tb_rx_crc_symtuppar_datain_fullpath, 'w')

    # Out .csv file helpers
    _file_tb_rx_crc_symtuppar_dataout_name = 'rx_crc_symtuppar_dataout_tb.csv'
    # _file_tb_rx_crc_symtuppar_dataout_fullpath = ('{0}\\{1}'.format(_rx_dir, _file_tb_rx_crc_symtuppar_dataout_name))
    _file_tb_rx_crc_symtuppar_dataout_fullpath = ('{0}{1}{2}'.format(_rx_dir, _delimiter, _file_tb_rx_crc_symtuppar_dataout_name))
    # _file_tb_rx_crc_symtuppar_datain_fullpath = ('{0}{1}{2}'.format(_rx_dir, _delimiter, _file_tb_rx_crc_symtuppar_datain_name))
    print('new file', _file_tb_rx_crc_symtuppar_dataout_name,'created: ', _file_tb_rx_crc_symtuppar_dataout_fullpath)
    _file_tb_rx_crc_symtuppar_dataout_line = open(_file_tb_rx_crc_symtuppar_dataout_fullpath, 'w')

    # Component out .csv file
    _file_rx_crc_symtuppar_compout_tb_name = 'rx_crc_symtuppar_compout_tb.csv'
    # _file_rx_crc_symtuppar_compout_tb_fullpath = ('{0}\\{1}'.format(_rx_dir, _file_rx_crc_symtuppar_compout_tb_name))
    _file_rx_crc_symtuppar_compout_tb_fullpath = ('{0}{1}{2}'.format(_rx_dir, _delimiter, _file_rx_crc_symtuppar_compout_tb_name))
    # _file_tb_rx_crc_symtuppar_dataout_fullpath = ('{0}{1}{2}'.format(_rx_dir, _delimiter, _file_tb_rx_crc_symtuppar_dataout_name))
    print('new file', _file_rx_crc_symtuppar_compout_tb_name,'created: ', _file_rx_crc_symtuppar_compout_tb_fullpath)
    _file_rx_crc_symtuppar_compout_tb_line = open(_file_rx_crc_symtuppar_compout_tb_fullpath, 'w')


    # Call the script for CRC calculation
    # Generate a random string of bits
    _list_in_msg = [0 for i in range(_int_symbol_width*_int_msg_symbols_cnt)]
    for _i in range(0, _number_of_transactions):
        for _j in range(0, _int_symbol_width*_int_msg_symbols_cnt):
            _list_in_msg[_j] = lib_rand.randint(0, 1)
        _file_tb_rx_crc_symtuppar_datain_line.write('{}\n'.format(lib_ff.merge_intlist_to_string(_list_in_msg)))
        _file_tb_rx_crc_symtuppar_dataout_line.write('{}\n'.format(lib_ff.merge_intlist_to_string(lib_ff.flatten_list(lib_crc.crc_symbolic_parallel_gf2m_lfsm1(_int_symbol_width, _list_prim_poly, _int_msg_symbols_cnt, _int_msg_tuplewidth, _list_symbol_seed, _list_gen_pol, _list_in_msg)))))
    _file_tb_rx_crc_symtuppar_datain_line.close()
    _file_tb_rx_crc_symtuppar_dataout_line.close()
    _file_rx_crc_symtuppar_compout_tb_line.close()
    print("Generation of the '.csv' helpers done.")
    
    
    # Generate Testbench file
    _file_tb_crc_symtuppar_rx_name = 'rx_crc_symtuppar_tb.vhd'
    # _file_tb_crc_symtuppar_rx_fullpath = ('{0}\\{1}'.format(_rx_dir, _file_tb_crc_symtuppar_rx_name))
    _file_tb_crc_symtuppar_rx_fullpath = ('{0}{1}{2}'.format(_rx_dir, _delimiter, _file_tb_crc_symtuppar_rx_name))
    # _file_rx_crc_symtuppar_compout_tb_fullpath = ('{0}{1}{2}'.format(_rx_dir, _delimiter, _file_rx_crc_symtuppar_compout_tb_name))
    print('new file', _file_tb_crc_symtuppar_rx_name,'created: ', _file_tb_crc_symtuppar_rx_fullpath)
    _file_tb_crc_symtuppar_rx_line = open(_file_tb_crc_symtuppar_rx_fullpath, 'w')
    
    _file_tb_crc_symtuppar_rx_line.write('    -- This file contains a simple verification environment for generated Symbol-Tuple parallel CRC\n')
    _file_tb_crc_symtuppar_rx_line.write('    -- for transmitter. First, precalculated values are loaded from helper files into scoreboard\n')
    _file_tb_crc_symtuppar_rx_line.write('    -- and based on these, output signals are being asserted in the main stimulus.\n')
    _file_tb_crc_symtuppar_rx_line.write('    -- Results of this test will be stored in "rx_crc_symtuppar_compout_tb.csv" after its execution.\n')
    _file_tb_crc_symtuppar_rx_line.write('    -- Engineer: Patrik Zahalka (patrik.zahalka@univie.ac.at; zahalka.patrik@gmail.com)\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('    library ieee;\n')
    _file_tb_crc_symtuppar_rx_line.write('    use ieee.std_logic_1164.all;\n')
    _file_tb_crc_symtuppar_rx_line.write('    use ieee.numeric_std.all;\n')
    _file_tb_crc_symtuppar_rx_line.write('    use ieee.std_logic_textio.all;\n')
    _file_tb_crc_symtuppar_rx_line.write('    use std.textio.all;\n')
    _file_tb_crc_symtuppar_rx_line.write('    use std.env.finish;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('    library {};\n'.format(str(_lib_src)))
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('    entity rx_crc_symtuppar_tb is\n')
    _file_tb_crc_symtuppar_rx_line.write('    end rx_crc_symtuppar_tb;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('    architecture sim of rx_crc_symtuppar_tb is\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        component rx_crc_symtuppar\n')
    _file_tb_crc_symtuppar_rx_line.write('            generic (\n')
    _file_tb_crc_symtuppar_rx_line.write('                SYMBOL_WIDTH : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(_int_symbol_width))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('                MSG_SYMBOLS  : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(_int_msg_symbols_cnt))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('                ZEROS_ADDED  : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(_cnt_new_bits_added))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('                TUPLE_WIDTH  : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(_int_msg_tuplewidth))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('                TUPLES_CNT   : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(int(_int_msg_parts)))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('                SUBMESSAGES_CNT : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(_submessages_cnt))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('                SYNCH_DESIGN    : boolean := true;\n')
    _file_tb_crc_symtuppar_rx_line.write('                REGS_SUBMSG_CNT : integer := 1\n')
    _file_tb_crc_symtuppar_rx_line.write('            );\n')
    _file_tb_crc_symtuppar_rx_line.write('            port (\n')
    _file_tb_crc_symtuppar_rx_line.write('                CLK     : in  std_logic;\n')
    _file_tb_crc_symtuppar_rx_line.write('                IN_DATA : in  std_logic_vector(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0);\n')
    _file_tb_crc_symtuppar_rx_line.write('                OUT_SYN : out std_logic_vector(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    _file_tb_crc_symtuppar_rx_line.write('                OUT_MSG : out std_logic_vector(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0)\n')
    _file_tb_crc_symtuppar_rx_line.write('            );\n')
    _file_tb_crc_symtuppar_rx_line.write('        end component;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        -- Textio: results of this test will be saved in the file "rx_crc_symtuppar_compout_tb.csv"\n')
    _file_tb_crc_symtuppar_rx_line.write('        file rx_crc_symtuppar_datain  : text;\n')
    _file_tb_crc_symtuppar_rx_line.write('        file rx_crc_symtuppar_dataout : text;\n')
    _file_tb_crc_symtuppar_rx_line.write('        file rx_crc_symtuppar_compout : text;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        -- Generic variables of the tested component\n')
    _file_tb_crc_symtuppar_rx_line.write('        constant SYMBOL_WIDTH : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(_int_symbol_width))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('        constant MSG_SYMBOLS     : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(_int_msg_symbols_cnt))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('        constant ZEROS_ADDED     : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(_cnt_new_bits_added))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('        constant TUPLE_WIDTH     : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(_int_msg_tuplewidth))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('        constant TUPLES_CNT      : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(int(_int_msg_parts)))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('        constant SUBMESSAGES_CNT : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(_submessages_cnt))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('        constant SYNCH_DESIGN    : boolean := true;\n')
    _file_tb_crc_symtuppar_rx_line.write('        constant REGS_SUBMSG_CNT : integer := 1;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        -- Clock and other properties of the testbench\n')
    _file_tb_crc_symtuppar_rx_line.write('        constant CLK_HZ       : integer := 100e6;\n')
    _file_tb_crc_symtuppar_rx_line.write('        constant CLK_PERIOD   : time := 1 sec / CLK_HZ;\n')
    _file_tb_crc_symtuppar_rx_line.write('        constant DELAY        : integer := 2 + REGS_SUBMSG_CNT; -- number of registers on the way to output\n')
    _file_tb_crc_symtuppar_rx_line.write('        constant TOTAL_ROWS   : integer := ')
    _file_tb_crc_symtuppar_rx_line.write('{}'.format(_number_of_transactions))
    _file_tb_crc_symtuppar_rx_line.write(';\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        -- Declare signals for Testbench\n')
    _file_tb_crc_symtuppar_rx_line.write('        signal CLK       : std_logic := \'0\';\n')
    _file_tb_crc_symtuppar_rx_line.write('        signal s_in_data : std_logic_vector(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0);\n')
    _file_tb_crc_symtuppar_rx_line.write('        signal s_out_SYN : std_logic_vector(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    _file_tb_crc_symtuppar_rx_line.write('        signal s_out_msg : std_logic_vector(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0);\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        -- Preload the data form external .csv files for Scoreboard\n')
    _file_tb_crc_symtuppar_rx_line.write('        type t_delayed_in_2d is array(TOTAL_ROWS+DELAY downto 0) of std_logic_vector(MSG_SYMBOLS*SYMBOL_WIDTH-1 downto 0);\n')
    _file_tb_crc_symtuppar_rx_line.write('        signal s_loaded_extfile_datain : t_delayed_in_2d := (others => (others => \'0\'));\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        type t_delayed_out_2d is array(TOTAL_ROWS-1 downto 0) of std_logic_vector(TUPLE_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    _file_tb_crc_symtuppar_rx_line.write('        signal s_loaded_extfile_dataout : t_delayed_out_2d := (others => (others => \'0\'));\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('    begin\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        -- Instantiate the device under test (DUT)\n')
    _file_tb_crc_symtuppar_rx_line.write('        dut: entity {}.rx_crc_symtuppar(rtl)\n'.format(str(_lib_src)))
    _file_tb_crc_symtuppar_rx_line.write('        generic map (\n')
    _file_tb_crc_symtuppar_rx_line.write('            SYMBOL_WIDTH    => SYMBOL_WIDTH,\n')
    _file_tb_crc_symtuppar_rx_line.write('            MSG_SYMBOLS     => MSG_SYMBOLS,\n')
    _file_tb_crc_symtuppar_rx_line.write('            ZEROS_ADDED     => ZEROS_ADDED,\n')
    _file_tb_crc_symtuppar_rx_line.write('            TUPLE_WIDTH     => TUPLE_WIDTH,\n')
    _file_tb_crc_symtuppar_rx_line.write('            TUPLES_CNT      => TUPLES_CNT,\n')
    _file_tb_crc_symtuppar_rx_line.write('            SUBMESSAGES_CNT => SUBMESSAGES_CNT,\n')
    _file_tb_crc_symtuppar_rx_line.write('            SYNCH_DESIGN    => SYNCH_DESIGN,\n')
    _file_tb_crc_symtuppar_rx_line.write('            REGS_SUBMSG_CNT => REGS_SUBMSG_CNT\n')
    _file_tb_crc_symtuppar_rx_line.write('        )\n')
    _file_tb_crc_symtuppar_rx_line.write('        port map (\n')
    _file_tb_crc_symtuppar_rx_line.write('            CLK     => CLK,\n')
    _file_tb_crc_symtuppar_rx_line.write('            IN_DATA => s_in_data,\n')
    _file_tb_crc_symtuppar_rx_line.write('            OUT_SYN => s_out_SYN,\n')
    _file_tb_crc_symtuppar_rx_line.write('            OUT_MSG => s_out_msg\n')
    _file_tb_crc_symtuppar_rx_line.write('        );\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        -- Generator of clock signal\n')
    _file_tb_crc_symtuppar_rx_line.write('        CLK <= not CLK after CLK_PERIOD / 2;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        -- Preloading data from external files\n')
    _file_tb_crc_symtuppar_rx_line.write('        scoreboard : process\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            variable v_loaded_extfile_datain : t_delayed_in_2d := (others => (others => \'0\'));\n')
    _file_tb_crc_symtuppar_rx_line.write('            variable v_loaded_extfile_dataout : t_delayed_out_2d := (others => (others => \'0\'));\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            -- TEXTIO files definition\n')
    _file_tb_crc_symtuppar_rx_line.write('            variable line_rx_crc_symtuppar_datain  : line;\n')
    _file_tb_crc_symtuppar_rx_line.write('            variable line_rx_crc_symtuppar_dataout : line;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            -- TB stimulus variables\n')
    _file_tb_crc_symtuppar_rx_line.write('            variable var_row_id : integer := 0;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        begin\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            report "----- PRELOADING .CSV SCOREBOARD -----";\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            -- Open IO files\n')
    # _file_tb_crc_symtuppar_rx_line.write('            file_open(rx_crc_symtuppar_datain, "{0}\\tb_rx_crc_symtuppar_datain.csv", read_mode);\n'.format(_rx_dir))
    _file_tb_crc_symtuppar_rx_line.write('            file_open(rx_crc_symtuppar_datain, "{0}{1}rx_crc_symtuppar_datain_tb.csv", read_mode);\n'.format(lib_ff.conv_cygpath_to_path(_rx_dir, _delimiter), _delimiter))
    # _file_tb_crc_symtuppar_rx_line.write('            file_open(rx_crc_symtuppar_dataout, "{0}\\tb_rx_crc_symtuppar_dataout.csv", read_mode);\n'.format(_rx_dir))
    _file_tb_crc_symtuppar_rx_line.write('            file_open(rx_crc_symtuppar_dataout, "{0}{1}rx_crc_symtuppar_dataout_tb.csv", read_mode);\n'.format(lib_ff.conv_cygpath_to_path(_rx_dir, _delimiter), _delimiter))
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            -- Loop until the last row of the file \n')
    _file_tb_crc_symtuppar_rx_line.write('            over_lines_file: while not endfile(rx_crc_symtuppar_datain) loop\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('                -- Read content of the current line\n')
    _file_tb_crc_symtuppar_rx_line.write('                readline(rx_crc_symtuppar_datain, line_rx_crc_symtuppar_datain);\n')
    _file_tb_crc_symtuppar_rx_line.write('                readline(rx_crc_symtuppar_dataout, line_rx_crc_symtuppar_dataout);\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('                -- Load the content of the current line to respective variables\n')
    _file_tb_crc_symtuppar_rx_line.write('                read(line_rx_crc_symtuppar_datain, v_loaded_extfile_datain(var_row_id));\n')
    _file_tb_crc_symtuppar_rx_line.write('                read(line_rx_crc_symtuppar_dataout, v_loaded_extfile_dataout(var_row_id));\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('                -- Increment row pointer\n')
    _file_tb_crc_symtuppar_rx_line.write('                var_row_id := var_row_id+1;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            end loop;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            s_loaded_extfile_datain <= v_loaded_extfile_datain;\n')
    _file_tb_crc_symtuppar_rx_line.write('            s_loaded_extfile_dataout <= v_loaded_extfile_dataout;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            file_close(rx_crc_symtuppar_datain);\n')
    _file_tb_crc_symtuppar_rx_line.write('            file_close(rx_crc_symtuppar_dataout);\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            report "----- PRELOADING ENDED -----";\n')
    _file_tb_crc_symtuppar_rx_line.write('            wait;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        end process;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        -- Main stimulus\n')
    _file_tb_crc_symtuppar_rx_line.write('        stimulus : process\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            -- TEXTIO files definition\n')
    _file_tb_crc_symtuppar_rx_line.write('            variable line_rx_crc_symtuppar_compout : line;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            -- TB stimulus variables\n')
    _file_tb_crc_symtuppar_rx_line.write('            variable var_act_clk    : integer := 0;\n')
    _file_tb_crc_symtuppar_rx_line.write('            variable var_err_count  : integer := 0;\n')
    _file_tb_crc_symtuppar_rx_line.write('            variable var_cnt_checks : integer := 1;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        begin\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            report "----- SIMULATION STARTED -----";\n')
    # _file_tb_crc_symtuppar_rx_line.write('            file_open(rx_crc_symtuppar_compout, "{0}\\rx_crc_symtuppar_compout_tb.csv", write_mode);\n'.format(_rx_dir))
    _file_tb_crc_symtuppar_rx_line.write('            file_open(rx_crc_symtuppar_compout, "{0}{1}rx_crc_symtuppar_compout_tb.csv", write_mode);\n'.format(lib_ff.conv_cygpath_to_path(_rx_dir, _delimiter), _delimiter))
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            for i in 0 to TOTAL_ROWS+DELAY loop\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('                -- Send data to input pins\n')
    _file_tb_crc_symtuppar_rx_line.write('                s_in_data <= s_loaded_extfile_datain(i);\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('                -- Start asserting only if there is something appearing at the output pins\n')
    _file_tb_crc_symtuppar_rx_line.write('                if var_act_clk > DELAY+1 then\n')
    _file_tb_crc_symtuppar_rx_line.write('                    if s_out_SYN /= s_loaded_extfile_dataout(var_act_clk-1-DELAY) then\n')
    _file_tb_crc_symtuppar_rx_line.write('                        var_err_count := var_err_count+1;\n')
    _file_tb_crc_symtuppar_rx_line.write('                        report "Incorrect result no. "\n')
    _file_tb_crc_symtuppar_rx_line.write('                        & integer\'image(var_err_count)\n')
    _file_tb_crc_symtuppar_rx_line.write('                        & "    Time: "\n')
    _file_tb_crc_symtuppar_rx_line.write('                        & time\'image(now)\n')
    _file_tb_crc_symtuppar_rx_line.write('                        & "    Row: "\n')
    _file_tb_crc_symtuppar_rx_line.write('                        & integer\'image(var_act_clk-DELAY)\n')
    _file_tb_crc_symtuppar_rx_line.write('                        & "    Expected: "\n')
    _file_tb_crc_symtuppar_rx_line.write('                        & integer\'image(to_integer(unsigned(s_loaded_extfile_dataout(var_act_clk-1-DELAY))))\n')
    _file_tb_crc_symtuppar_rx_line.write('                        & "    Actual: "\n')
    _file_tb_crc_symtuppar_rx_line.write('                        & integer\'image(to_integer(unsigned(s_out_SYN)))\n')
    _file_tb_crc_symtuppar_rx_line.write('                        severity error;\n')
    _file_tb_crc_symtuppar_rx_line.write('                    end if;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('                    write(line_rx_crc_symtuppar_compout, time\'image(now));\n')
    _file_tb_crc_symtuppar_rx_line.write('                    write(line_rx_crc_symtuppar_compout, string\'(","));\n')
    _file_tb_crc_symtuppar_rx_line.write('                    write(line_rx_crc_symtuppar_compout, integer\'image(i-DELAY));\n')
    _file_tb_crc_symtuppar_rx_line.write('                    write(line_rx_crc_symtuppar_compout, string\'(","));\n')
    _file_tb_crc_symtuppar_rx_line.write('                    write(line_rx_crc_symtuppar_compout, s_out_SYN);\n')
    _file_tb_crc_symtuppar_rx_line.write('                    write(line_rx_crc_symtuppar_compout, string\'(","));\n')
    _file_tb_crc_symtuppar_rx_line.write('                    if s_out_SYN /= s_loaded_extfile_dataout(var_act_clk-1-DELAY) then\n')
    _file_tb_crc_symtuppar_rx_line.write('                        write(line_rx_crc_symtuppar_compout, string\'("ERROR"));\n')
    _file_tb_crc_symtuppar_rx_line.write('                    else\n')
    _file_tb_crc_symtuppar_rx_line.write('                        write(line_rx_crc_symtuppar_compout, string\'("OK"));\n')
    _file_tb_crc_symtuppar_rx_line.write('                end if;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('                var_cnt_checks := var_cnt_checks+1;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            else\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('                write(line_rx_crc_symtuppar_compout, time\'image(now));\n')
    _file_tb_crc_symtuppar_rx_line.write('                write(line_rx_crc_symtuppar_compout, string\'(","));\n')
    _file_tb_crc_symtuppar_rx_line.write('                write(line_rx_crc_symtuppar_compout, integer\'image(i-DELAY));\n')
    _file_tb_crc_symtuppar_rx_line.write('                write(line_rx_crc_symtuppar_compout, string\'(","));\n')
    _file_tb_crc_symtuppar_rx_line.write('                write(line_rx_crc_symtuppar_compout, s_out_SYN);\n')
    _file_tb_crc_symtuppar_rx_line.write('                write(line_rx_crc_symtuppar_compout, string\'(","));\n')
    _file_tb_crc_symtuppar_rx_line.write('                write(line_rx_crc_symtuppar_compout, string\'("N/A"));\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            end if;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('                writeline(rx_crc_symtuppar_compout, line_rx_crc_symtuppar_compout);\n')
    _file_tb_crc_symtuppar_rx_line.write('                var_act_clk := var_act_clk+1;\n')
    _file_tb_crc_symtuppar_rx_line.write('                wait until rising_edge(CLK);\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            end loop;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            file_close(rx_crc_symtuppar_compout);\n')
    _file_tb_crc_symtuppar_rx_line.write('            report "----- SIMULATION SUMMARY -----";\n')
    _file_tb_crc_symtuppar_rx_line.write('            report "Total checks count: " & integer\'image(var_cnt_checks);\n')
    _file_tb_crc_symtuppar_rx_line.write('            report "Total mistakes count: " & integer\'image(var_err_count);\n')
    _file_tb_crc_symtuppar_rx_line.write('            report "----- SIMULATION ENDED -----";\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('            finish;\n')
    _file_tb_crc_symtuppar_rx_line.write('            wait;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('        end process;\n')
    _file_tb_crc_symtuppar_rx_line.write('\n')
    _file_tb_crc_symtuppar_rx_line.write('    end architecture;')
    print("Generation of the '.vhd' files for RX CRC done.")