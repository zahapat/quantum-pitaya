# ----- Libraries -----
import math as lib_math
import random as lib_rand
import csv as lib_csv
import pathlib as lib_path


# ----- Functions Declaration -----
# Generate VHDL GF CONSTANT MULTIPLIER
def create_gfmult_constb_vhdl(_out_dir, _delimiter):

    _file_gfmult_constb_name = 'gfmult_constb.vhd'
    # _file_gfmult_constb_fullpath = ('{0}\\{1}'.format(_out_dir, _file_gfmult_constb_name))
    _file_gfmult_constb_fullpath = ('{0}{1}{2}'.format(_out_dir, _delimiter, _file_gfmult_constb_name))
    # _file_wrapped_crc_rx_gen_fullpath = ('{0}{1}{2}'.format(_out_dir, _delimiter, _file_wrapped_crc_rx_gen_name))
    print('new file', _file_gfmult_constb_name,'created: ', _file_gfmult_constb_fullpath)
    _file_gfmult_constb_line = open(_file_gfmult_constb_fullpath, 'w')

    _file_gfmult_constb_line.write('    -- File "gfmult_constb.vhd" generates a finite field multiplier for constant input B, generates only XOR gates\n')
    _file_gfmult_constb_line.write('    -- Engineer: Patrik Zahalka (patrik.zahalka@univie.ac.at; zahalka.patrik@gmail.com)\n')
    _file_gfmult_constb_line.write('    -- Year: 2021\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('    library ieee;\n')
    _file_gfmult_constb_line.write('    use ieee.std_logic_1164.all;\n')
    _file_gfmult_constb_line.write('    use ieee.numeric_std.all;\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('    entity gfmult_constb is\n')
    _file_gfmult_constb_line.write('        generic (\n')
    _file_gfmult_constb_line.write('            SYMBOL_WIDTH    : integer;\n')
    _file_gfmult_constb_line.write('            PRIM_POLYNOMIAL : std_logic_vector;\n')
    _file_gfmult_constb_line.write('            CONST_B         : std_logic_vector\n')
    _file_gfmult_constb_line.write('        );\n')
    _file_gfmult_constb_line.write('        port (\n')
    _file_gfmult_constb_line.write('            VAR_A : in std_logic_vector(SYMBOL_WIDTH-1 downto 0);\n')
    _file_gfmult_constb_line.write('            OUT_C : out std_logic_vector(SYMBOL_WIDTH-1 downto 0)\n')
    _file_gfmult_constb_line.write('        );\n')
    _file_gfmult_constb_line.write('    end gfmult_constb;\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('    architecture rtl of gfmult_constb is\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('        -- Primitive polynomial forming the Galois Field\n')
    _file_gfmult_constb_line.write('        constant PRIM_POLY     : std_logic_vector(SYMBOL_WIDTH downto 0) := PRIM_POLYNOMIAL;\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('        -- The constant port B\n')
    _file_gfmult_constb_line.write('        constant CONSTANT_B    : std_logic_vector(SYMBOL_WIDTH-1 downto 0) := CONST_B;\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('        -- GF DEDICATED LOGIC MULTIPLIER - for constant port B; using Matrix B [(SYMBOL_WIDTH-1) x (SYMBOL_WIDTH-1)]\n')
    _file_gfmult_constb_line.write('        type t_arr_shift is array(SYMBOL_WIDTH-1 downto 0) of std_logic_vector(SYMBOL_WIDTH-1 downto 0);\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('        -- Function for bit vector calculation detrminig at which position insert xor gate with input\n')
    _file_gfmult_constb_line.write('        function f_gfmult_const_b (\n')
    _file_gfmult_constb_line.write('            B_OPT_GFMUL : in std_logic_vector(SYMBOL_WIDTH-1 downto 0)\n')
    _file_gfmult_constb_line.write('        ) return std_logic_vector is\n')
    _file_gfmult_constb_line.write('            variable var_shifted_in_b  : t_arr_shift := (others => (others => \'0\'));\n')
    _file_gfmult_constb_line.write('            variable var_single_vector : std_logic_vector(SYMBOL_WIDTH*SYMBOL_WIDTH-1 downto 0) := (others => \'0\');\n')
    _file_gfmult_constb_line.write('        begin\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('            -- Seed to initialise the counter is the actual input B\n')
    _file_gfmult_constb_line.write('            var_shifted_in_b(0)(SYMBOL_WIDTH-1 downto 0) := B_OPT_GFMUL;\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('            const_gf_roots : for i in 1 to SYMBOL_WIDTH-1 loop\n')
    _file_gfmult_constb_line.write('                if var_shifted_in_b(i-1)(SYMBOL_WIDTH-1) = \'1\' then\n')
    _file_gfmult_constb_line.write('                    var_shifted_in_b(i)(SYMBOL_WIDTH-1 downto 0) := (var_shifted_in_b(i-1)(SYMBOL_WIDTH-2 downto 0) & \'0\') xor PRIM_POLY(SYMBOL_WIDTH-1 downto 0);\n')
    _file_gfmult_constb_line.write('                else\n')
    _file_gfmult_constb_line.write('                    var_shifted_in_b(i)(SYMBOL_WIDTH-1 downto 0) := var_shifted_in_b(i-1)(SYMBOL_WIDTH-2 downto 0) & \'0\';\n')
    _file_gfmult_constb_line.write('                end if;\n')
    _file_gfmult_constb_line.write('            end loop const_gf_roots;\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('            create_bitvector : for i in 0 to SYMBOL_WIDTH-1 loop\n')
    _file_gfmult_constb_line.write('                for u in 0 to SYMBOL_WIDTH-1 loop\n')
    _file_gfmult_constb_line.write('                    var_single_vector(i*SYMBOL_WIDTH+u) := var_shifted_in_b(u)(i);\n')
    _file_gfmult_constb_line.write('                end loop;\n')
    _file_gfmult_constb_line.write('            end loop create_bitvector;\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('            return var_single_vector(SYMBOL_WIDTH*SYMBOL_WIDTH-1 downto 0);\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('        end function f_gfmult_const_b;\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('        constant DEDICATED_MULT_CONST_B : std_logic_vector(SYMBOL_WIDTH*SYMBOL_WIDTH-1 downto 0) := f_gfmult_const_b(CONSTANT_B);\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('        -- Create dedicated logic\n')
    _file_gfmult_constb_line.write('        type t_number_of_xors is array(SYMBOL_WIDTH-1 downto 0) of std_logic_vector(SYMBOL_WIDTH downto 0);\n')
    _file_gfmult_constb_line.write('        signal s_number_of_xors : t_number_of_xors := (others => (others => \'0\'));\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('    begin\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('        -- Insert XOR gates where needed\n')
    _file_gfmult_constb_line.write('        number_of_xors : for i in 0 to SYMBOL_WIDTH-1 generate\n')
    _file_gfmult_constb_line.write('            scan_input_a : for u in 0 to SYMBOL_WIDTH-1 generate\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('                create_dedicated_true : if DEDICATED_MULT_CONST_B(i*SYMBOL_WIDTH+u) = \'1\' generate\n')
    _file_gfmult_constb_line.write('                    s_number_of_xors(i)(u+1) <= VAR_A(u) xor s_number_of_xors(i)(u);\n')
    _file_gfmult_constb_line.write('                end generate;\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('                create_dedicated_false : if DEDICATED_MULT_CONST_B(i*SYMBOL_WIDTH+u) = \'0\' generate\n')
    _file_gfmult_constb_line.write('                    s_number_of_xors(i)(u+1) <= s_number_of_xors(i)(u);\n')
    _file_gfmult_constb_line.write('                end generate;\n')
    _file_gfmult_constb_line.write('            end generate;\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('            OUT_C(i) <= s_number_of_xors(i)(SYMBOL_WIDTH);\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('        end generate;\n')
    _file_gfmult_constb_line.write('\n')
    _file_gfmult_constb_line.write('    end architecture;\n')
    _file_gfmult_constb_line.close()