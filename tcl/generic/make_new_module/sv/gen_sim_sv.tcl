# This file generates a template of a HDL simulation file (VHDL)

puts $new_file_sim ""
puts $new_file_sim "    // ${name_file}_tb.${suffix_file}: Testbench for module ${name_file}.${suffix_file}"
puts $new_file_sim "    // Engineer: $engineer_name"
puts $new_file_sim "    // Email: $email_addr"
set clock_seconds [clock seconds]
set act_date [clock format $clock_seconds -format %D]
puts $new_file_sim "    // Created: $act_date"
puts $new_file_sim ""
puts $new_file_sim "    // This is the topmost file, which connects the DUT and TestBench"
puts $new_file_sim "    // The interface connects the DUT and TestBench, conducts simple testing"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "    // Define interface to wrap all inputs, outputs, inouts into one package"
puts $new_file_sim "    interface intf ("
puts $new_file_sim "        input logic clk, "
puts $new_file_sim "        input logic rst);"
puts $new_file_sim ""
puts $new_file_sim "        // Declare the signals to be grouped"
puts $new_file_sim "        logic valid;"
puts $new_file_sim "        logic \[3:0] a;"
puts $new_file_sim "        logic \[3:0] b;"
puts $new_file_sim "        logic \[3:0] c;"
puts $new_file_sim "    endinterface"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "    // Testbench body"
puts $new_file_sim "    module ${name_file}_tb;"
puts $new_file_sim "    "
puts $new_file_sim "        // Clock and rst signal declaration"
puts $new_file_sim "        bit clk = 1'b0;"
puts $new_file_sim "        bit rst = 1'b0;"
puts $new_file_sim ""
puts $new_file_sim "            // TX signals for generating random input "
puts $new_file_sim "            bit \[3:0] tx_rand_bit_a = 3'b0;"
puts $new_file_sim "            bit \[3:0] tx_rand_bit_b = 3'b0;"
puts $new_file_sim "            int unsigned tx_rand_int_a = 3'b0;"
puts $new_file_sim "            int unsigned tx_rand_int_b = 3'b0;"
puts $new_file_sim ""
puts $new_file_sim "            // RX signal from the module: Use raw data from the interface for assertion"
puts $new_file_sim ""
puts $new_file_sim "        // Used to count the number of transactions"
puts $new_file_sim "        int trans_cnt = 1;"
puts $new_file_sim ""
puts $new_file_sim "        // Seeds for random unsigned numbers generation"
puts $new_file_sim "        int unsigned seed1;"
puts $new_file_sim "        int unsigned seed2;"
puts $new_file_sim ""
puts $new_file_sim "        // Specify number of transactions to be generated"
puts $new_file_sim "        int gen_repeat_cnt = 5;"
puts $new_file_sim "        "
puts $new_file_sim "        // Create instance of interface, inorder to connect DUT and testcase"
puts $new_file_sim "        intf inst_intf(clk, rst);"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "        // DUT instance, interface signals are connected to the DUT ports"
puts $new_file_sim "        ${name_file} DUT ("
puts $new_file_sim "            .clk(inst_intf.clk),"
puts $new_file_sim "            .rst(inst_intf.rst),"
puts $new_file_sim "            .a(inst_intf.a),"
puts $new_file_sim "            .b(inst_intf.b),"
puts $new_file_sim "            .valid(inst_intf.valid),"
puts $new_file_sim "            .c(inst_intf.c)"
puts $new_file_sim "        );"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "        // Clock generation"
puts $new_file_sim "        always #5 clk = ~clk;"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "        function void display_trans ("
puts $new_file_sim "            string name);"
puts $new_file_sim "            \$display(\"-------------------------\");"
puts $new_file_sim "            \$display(\"- %s \", name);"
puts $new_file_sim "            \$display(\"-------------------------\");"
puts $new_file_sim "            \$display(\"- TX: a = %0d, b = %0d\", inst_intf.a, inst_intf.b);"
puts $new_file_sim "            \$display(\"- RX: c = %0d\", inst_intf.c);"
puts $new_file_sim "            \$display(\"-------------------------\");"
puts $new_file_sim "        endfunction"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "        // STIMULUS: Drive the transaction items to interface signals"
puts $new_file_sim "        initial begin"
puts $new_file_sim ""
puts $new_file_sim "            // Init values for inputs"
puts $new_file_sim "            rst = 1'b1;"
puts $new_file_sim "            inst_intf.valid = 0;"
puts $new_file_sim "            inst_intf.a = 0;"
puts $new_file_sim "            inst_intf.b = 0;"
puts $new_file_sim ""
puts $new_file_sim "            // Reset strobe"
puts $new_file_sim "            #5 rst = 1'b1;"
puts $new_file_sim "            rst <= 1'b0;"
puts $new_file_sim ""
puts $new_file_sim "            repeat(gen_repeat_cnt) begin"
puts $new_file_sim "                // Prepare seeds and randomize inputs a and b and "
puts $new_file_sim "                seed1 = \$urandom(trans_cnt);"
puts $new_file_sim "                seed2 = \$urandom(seed1);"
puts $new_file_sim "                tx_rand_int_a = \$dist_uniform(seed1, 0, 2**(\$size(inst_intf.a)-1)-1 );"
puts $new_file_sim "                tx_rand_int_b = \$dist_uniform(seed2, 0, 2**(\$size(inst_intf.a)-1)-1 );"
puts $new_file_sim "                tx_rand_bit_a = unsigned'(tx_rand_int_a\[\$size(inst_intf.a)-1:0] );"
puts $new_file_sim "                tx_rand_bit_b = unsigned'(tx_rand_int_b\[\$size(inst_intf.b)-1:0]) ;"
puts $new_file_sim "                \$display(\"tx_rand_bit_a = %b; tx_rand_bit_b = %b\", tx_rand_bit_a, tx_rand_bit_b);"
puts $new_file_sim ""
puts $new_file_sim "                // Tx"
puts $new_file_sim "                @(posedge inst_intf.clk);"
puts $new_file_sim "                inst_intf.valid <= 1;"
puts $new_file_sim "                inst_intf.a <= tx_rand_bit_a;"
puts $new_file_sim "                inst_intf.b <= tx_rand_bit_b;"
puts $new_file_sim "                \$display(\"inst_intf.a = %b; inst_intf.b = %b\", inst_intf.a, inst_intf.b);"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "                // Rx"
puts $new_file_sim "                @(posedge inst_intf.clk);"
puts $new_file_sim "                inst_intf.valid <= 0;"
puts $new_file_sim "                @(posedge inst_intf.clk);"
puts $new_file_sim "                display_trans(\"\[ Driver ]\");"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "                // Check correct result"
puts $new_file_sim "                if ((tx_rand_bit_a + tx_rand_bit_b) == inst_intf.c)"
puts $new_file_sim "                    \$display(\"Result is as Expected\");"
puts $new_file_sim "                else"
puts $new_file_sim "                    \$error(\"Wrong Result. Expeced: %0d Actual: %0d\", (tx_rand_bit_a + tx_rand_bit_b), inst_intf.c);"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "                // Increment transaction counter"
puts $new_file_sim "                trans_cnt++;"
puts $new_file_sim "            end"
puts $new_file_sim ""
puts $new_file_sim "            \$finish;"
puts $new_file_sim "        end"
puts $new_file_sim "        "
puts $new_file_sim "        // Enabline the wave dump"
puts $new_file_sim "        initial begin"
puts $new_file_sim "            \$dumpfile(\"dump.vcd\"); \$dumpvars;"
puts $new_file_sim "        end"
puts $new_file_sim ""
puts -nonewline $new_file_sim "    endmodule"