puts $new_file_sim "    // This file serves for generating the stimulus by randomizing the transaction class"
puts $new_file_sim "    // Sending the randomized class to driver"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "    class sequencer;"
puts $new_file_sim "    "
puts $new_file_sim "        // Declare transaction class"
puts $new_file_sim "        rand transaction trans;"
puts $new_file_sim ""
puts $new_file_sim "        // Declare a new mailbox"
puts $new_file_sim "        mailbox mail_seq2driv;"
puts $new_file_sim ""
puts $new_file_sim "        // Event indicating end of generation of transactions"
puts $new_file_sim "        event gen_ended;"
puts $new_file_sim ""
puts $new_file_sim "        // Specify number of transactions to be generated"
puts $new_file_sim "        int gen_repeat_cnt"
puts $new_file_sim ""
puts $new_file_sim "        // Constructor"
puts $new_file_sim "        function new ("
puts $new_file_sim "            mailbox mail_seq2driv);"
puts $new_file_sim "            // Get the mailbox handle from env"
puts $new_file_sim "            this.mail_seq2driv = mail_seq2driv;"
puts $new_file_sim "        endfunction"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "        // MAIN TASK: 'Randomize' the transaction class: generate (create and randomize) the packets "
puts $new_file_sim "        // and puts them into mailbox which sends them to Driver"
puts $new_file_sim "        task main();"
puts $new_file_sim ""
puts $new_file_sim "            // Loop given number of times"
puts $new_file_sim "            repeat(gen_repeat_cnt) begin"
puts $new_file_sim "                trans = new();"
puts $new_file_sim ""
puts $new_file_sim "                // Randomize"
puts $new_file_sim "                if ( !trans.randomize() \$fatal (\"Gen:: trans randomization failed\"))"
puts $new_file_sim "                mail_seq2driv.put(trans);"
puts $new_file_sim "            end"
puts $new_file_sim ""
puts $new_file_sim "            // Triggering this indicates the end of packets generation"
puts $new_file_sim "            -> gen_ended;"
puts $new_file_sim "        endtask"
puts $new_file_sim ""
puts $new_file_sim "    endclass"