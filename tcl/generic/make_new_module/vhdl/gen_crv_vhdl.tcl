puts $new_file_sim "    -- Constrained Random Verification: Example Template"
puts $new_file_sim ""
puts $new_file_sim "    library ieee;"
puts $new_file_sim "    use ieee.std_logic_1164.all;"
puts $new_file_sim "    use ieee.numeric_std.all;"
puts $new_file_sim "    -- use ieee.math_real.all;"
puts $new_file_sim "    -- use ieee.math_complex.all;"
puts $new_file_sim ""
puts $new_file_sim "    use std.textio.all;"
puts $new_file_sim "    use std.env.finish;"
puts $new_file_sim ""
puts $new_file_sim "    library osvvm;"
puts $new_file_sim "    use osvvm.RandomPkg.all;"
puts $new_file_sim "    use osvvm.ScoreboardPkg_slv.all;"
puts $new_file_sim "    use osvvm.TranscriptPkg.all;"
puts $new_file_sim "    use osvvm.AlertLogPkg.all;"
puts $new_file_sim "    use osvvm.CoveragePkg.all;"
puts $new_file_sim ""
puts $new_file_sim "    -- Additional packages (sim)"
puts $new_file_sim "    library $file_library_sim;"
puts $new_file_sim "        -- Project-specific packages"
puts $new_file_sim "    use $file_library_sim.const_pack_tb.all;"
puts $new_file_sim "    use $file_library_sim.gtypes_pack_tb.all;"
puts $new_file_sim "    use $file_library_sim.signals_pack_tb.all;"
puts $new_file_sim ""
puts $new_file_sim "        -- Generic packages"
puts $new_file_sim "    use $file_library_sim.print_pack_tb.all;"
puts $new_file_sim "    use $file_library_sim.clk_pack_tb.all;"
puts $new_file_sim "    use $file_library_sim.list_string_pack_tb.all;"
puts $new_file_sim "    use $file_library_sim.print_list_pack_tb.all;"
puts $new_file_sim ""
puts $new_file_sim "    -- Additional project-specific packages (src)"
puts $new_file_sim "    library $file_library_src;"
puts $new_file_sim "    use $file_library_src.const_pack.all;"
puts $new_file_sim "    use $file_library_src.gtypes_pack.all;"
puts $new_file_sim "    use $file_library_src.signals_pack.all;"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "    entity crv_${name_file}_tb is"
puts $new_file_sim "    end crv_${name_file}_tb;"
puts $new_file_sim ""
puts $new_file_sim "    architecture sim of crv_${name_file}_tb is"
puts $new_file_sim ""
puts $new_file_sim "        constant clk_hz : integer := 100e6;"
puts $new_file_sim "        constant clk_period : time := 1 sec / clk_hz;"
puts $new_file_sim "        constant baud_rate : positive := 115200;"
puts $new_file_sim "        "
puts $new_file_sim "        -- DUT signals"
puts $new_file_sim "        signal clk : std_logic := '1';"
puts $new_file_sim "        signal rst : std_logic := '1';"
puts $new_file_sim "        signal to_${name_file} : std_logic_vector(7 downto 0) := (others => 'X');"
puts $new_file_sim "        signal to_${name_file}_valid : std_logic := '0';"
puts $new_file_sim "        signal to_${name_file}_ack : std_logic;"
puts $new_file_sim "        signal from_${name_file} : std_logic_vector(7 downto 0);"
puts $new_file_sim "        signal from_${name_file}_valid : std_logic;"
puts $new_file_sim "        signal ${name_file}_tx : std_logic;"
puts $new_file_sim "        signal ${name_file}_rx : std_logic := '1';"
puts $new_file_sim ""
puts $new_file_sim "        -- BFM signals"
puts $new_file_sim "        signal bfm_data : std_logic_vector(7 downto 0) := (others => '0');"
puts $new_file_sim "        signal bfm_data_valid : boolean;"
puts $new_file_sim "    "
puts $new_file_sim "        -- Scoreboard = Data structure for self checking of inputs, which are closely related to outputs"
puts $new_file_sim "        shared variable scoreboard : ScoreboardPType;"
puts $new_file_sim ""
puts $new_file_sim "        -- Coverage"
puts $new_file_sim "        shared variable coverage : CovPType;"
puts $new_file_sim ""
puts $new_file_sim "        -- Checker done"
puts $new_file_sim "        signal rx_checker_done : boolean;"
puts $new_file_sim ""
puts $new_file_sim "    begin"
puts $new_file_sim "    "
puts $new_file_sim "        gen_clk_freq_hz_int(clk, clk_hz);"
puts $new_file_sim "        "
puts $new_file_sim "        DUT : entity lib_src.${name_file}(rtl)"
puts $new_file_sim "            generic map ("
puts $new_file_sim "                baud => baud_rate,"
puts $new_file_sim "                clock_frequency => clk_hz"
puts $new_file_sim "            )"
puts $new_file_sim "            port map (  "
puts $new_file_sim "                clock => clk,"
puts $new_file_sim "                reset => rst,"
puts $new_file_sim "                data_stream_in => to_${name_file},"
puts $new_file_sim "                data_stream_in_stb => to_${name_file}_valid,"
puts $new_file_sim "                data_stream_in_ack => to_${name_file}_ack,"
puts $new_file_sim "                data_stream_out => from_${name_file},"
puts $new_file_sim "                data_stream_out_stb => from_${name_file}_valid,"
puts $new_file_sim "                tx => ${name_file}_tx,"
puts $new_file_sim "                rx => ${name_file}_rx"
puts $new_file_sim "            );"
puts $new_file_sim "        "
puts $new_file_sim "        BFM : entity lib_sim.${name_file}_bfm_tb(beh)"
puts $new_file_sim "            generic map ("
puts $new_file_sim "              baud => baud_rate"
puts $new_file_sim "            )"
puts $new_file_sim "            port map ("
puts $new_file_sim "              data_in => bfm_data,"
puts $new_file_sim "              data_in_valid => bfm_data_valid,"
puts $new_file_sim "              data_out => bfm_data,"
puts $new_file_sim "              data_out_valid => bfm_data_valid,"
puts $new_file_sim "              rx => ${name_file}_tx,"
puts $new_file_sim "              tx => ${name_file}_rx"
puts $new_file_sim "            );"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "        proc_rx_checker : process"
puts $new_file_sim "        begin"
puts $new_file_sim ""
puts $new_file_sim "            wait until rst = '0';"
puts $new_file_sim ""
puts $new_file_sim "            -- Intelligent coverage randomization"
puts $new_file_sim "            while not coverage.IsCovered loop"
puts $new_file_sim " "
puts $new_file_sim "                wait until rising_edge(from_${name_file}_valid);"
puts $new_file_sim "                scoreboard.Check(from_${name_file});"
puts $new_file_sim "                coverage.ICover(to_integer(unsigned(from_${name_file})));"
puts $new_file_sim ""
puts $new_file_sim "            end loop;"
puts $new_file_sim ""
puts $new_file_sim "            rx_checker_done <= true;"
puts $new_file_sim "            wait;"
puts $new_file_sim ""
puts $new_file_sim "        end process;"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "        proc_tx : process"
puts $new_file_sim "            variable rand_v : RandomPType;"
puts $new_file_sim "            variable data : std_logic_vector(7 downto 0);"
puts $new_file_sim "        begin"
puts $new_file_sim ""
puts $new_file_sim "            wait until rst = '0';"
puts $new_file_sim ""
puts $new_file_sim "            loop"
puts $new_file_sim ""
puts $new_file_sim "                -- Random Slv Generator"
puts $new_file_sim "                -- data := rand_v.RandSlv(data'length);"
puts $new_file_sim ""
puts $new_file_sim "                -- Intelligent Coverage: Generate a constrained pseudorandom number"
puts $new_file_sim "                -- Speed-up the pseudorandom number generator to hit the Coverage model requirements faster"
puts $new_file_sim "                data := std_logic_vector(to_unsigned(coverage.GetRandPoint, data'length));"
puts $new_file_sim "                to_${name_file} <= data;"
puts $new_file_sim ""
puts $new_file_sim "                -- Add expected value to scoreboard"
puts $new_file_sim "                scoreboard.push(data);"
puts $new_file_sim "                to_${name_file}_valid <= '1';"
puts $new_file_sim ""
puts $new_file_sim "                wait until to_${name_file}_ack = '1';"
puts $new_file_sim "                wait until rising_edge(clk);"
puts $new_file_sim ""
puts $new_file_sim "                to_${name_file} <= (others => 'X');"
puts $new_file_sim "                to_${name_file}_valid <= '0';"
puts $new_file_sim ""
puts $new_file_sim "                wait for 10 * clk_period;"
puts $new_file_sim ""
puts $new_file_sim "            end loop;"
puts $new_file_sim "        end process;"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "        main_sequencer : process"
puts $new_file_sim "        begin"
puts $new_file_sim ""
puts $new_file_sim "            -- Name/Description of the scoreboard object listed in the test"
puts $new_file_sim "            scoreboard.SetAlertLogID(\"${name_file}_data_scoreboard\");"
puts $new_file_sim ""
puts $new_file_sim "            -- Stop at max number of errors"
puts $new_file_sim "            SetAlertStopCount(ERROR, 10);"
puts $new_file_sim ""
puts $new_file_sim "            -- Name/Description of the coverage object listed in the test"
puts $new_file_sim "            coverage.SetAlertLogID(\"Bytes_received_from_the_DUT\");"
puts $new_file_sim ""
puts $new_file_sim "            -- Add new coverage model"
puts $new_file_sim "            -- Generate 256 bins of values 0 to 255"
puts $new_file_sim "            -- Updates the coverage object with new bins"
puts $new_file_sim "            coverage.AddBins ("
puts $new_file_sim "                Name => \"Received_bytes\","
puts $new_file_sim "                -- Each of the bins must be hit at least once"
puts $new_file_sim "                AtLeast => 1,"
puts $new_file_sim "                CovBin => GenBin ("
puts $new_file_sim "                    Min => 0,"
puts $new_file_sim "                    Max => 255"
puts $new_file_sim "                )"
puts $new_file_sim "            );"
puts $new_file_sim ""
puts $new_file_sim "            wait for clk_period * 2;"
puts $new_file_sim ""
puts $new_file_sim "            rst <= '0';"
puts $new_file_sim ""
puts $new_file_sim "            -- Set the timeout requirement (simulation time): to not tolerate any longer time-runs"
puts $new_file_sim "            wait until rx_checker_done for 30 ms;"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "            -- Break the sim if runtime requirement above not met"
puts $new_file_sim "            assert coverage.IsCovered"
puts $new_file_sim "                report \"Coverage goals not met within \" & to_string(now)"
puts $new_file_sim "                severity failure;"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "            -- Print out information/results about the coverage object"
puts $new_file_sim "            coverage.WriteBin;"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "            -- Print reports about the coverage status"
puts $new_file_sim "            Print(\"********************************\");"
puts $new_file_sim "            Print(\"* All coverage goals met\");"
puts $new_file_sim "            Print(\"* Sent and received bytes: \" & to_string(scoreboard.GetCheckCount));"
puts $new_file_sim "            Print(\"* Errors and warnings:     \" & to_string(GetAlertCount));"
puts $new_file_sim ""
puts $new_file_sim "            assert GetAlertCount = 0"
puts $new_file_sim "                report \"There were errors and warnings. Check the transcript.\""
puts $new_file_sim "                severity failure;"
puts $new_file_sim ""
puts $new_file_sim "            Print(\"* Test: OK\");"
puts $new_file_sim "            Print(\"********************************\");"
puts $new_file_sim ""
puts $new_file_sim ""
puts $new_file_sim "            finish;"
puts $new_file_sim "            wait;"
puts $new_file_sim "        end process;"
puts $new_file_sim ""
puts $new_file_sim "    end architecture;"