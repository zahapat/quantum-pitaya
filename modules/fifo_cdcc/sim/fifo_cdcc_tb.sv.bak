`timescale 1 ns / 1 ps  // time-unit = 1 ns, precision = 10 ps

module fifo_cdcc_tb;

    // ------------------------------------------------
    // DUT IO Signals and Instance
    // ------------------------------------------------
    // Generics
    localparam INT_FIFO_WIDTH = 32;
    localparam INT_FIFO_DEPTH = 1024;
    localparam INT_FIFO_PTR_BITS_CNT = $clog2(INT_FIFO_DEPTH);
    // Write Signals
    reg wr_clk;
    reg wr_rst;
    // Read Signals
    reg rd_clk;
    reg rd_rst;
    // AXI Input Signals
    reg[INT_FIFO_PTR_BITS_CNT-1:0] i_data;
    reg i_valid;
    wire o_ready;
    // AXI Output Signals
    wire[INT_FIFO_PTR_BITS_CNT-1:0] o_data;
    wire o_data_valid;
    reg i_dready;
    // DUT Instance
    fifo_cdcc #(
        .INT_FIFO_WIDTH(INT_FIFO_WIDTH),
        .INT_FIFO_DEPTH(INT_FIFO_DEPTH) // Must be a multiple of 2 (because of Gray counter width)
    ) inst_fifo_cdcc_dut (
        // Write Signals
        .wr_clk(wr_clk),
        .wr_rst(wr_rst),

        // Read Signals
        .rd_clk(rd_clk),
        .rd_rst(rd_rst),

        // AXI Input Ports
        .i_data(i_data),
        .i_valid(i_valid),
        .o_ready(o_ready),    // This module ready

        // AXI Output Ports
        .o_data(o_data),
        .o_data_valid(o_data_valid),
        .i_dready(i_dready)    // Destinantion ready
    );

    // Clocks
    localparam int clk1_period_ns = 10; // * 1 ns on timescale
    localparam int clk2_period_ns = 6; // * 1 ns on timescale
    always begin
        wr_clk <= 1'b1;
        #clk1_period_ns;
        wr_clk <= 0'b1;
        #clk1_period_ns;
    end
    always begin
        rd_clk <= 1'b1;
        #clk2_period_ns;
        rd_clk <= 0'b1;
        #clk2_period_ns;
    end


    // ------------------------------------------------
    // Tasks
    // ------------------------------------------------
    task task_wr_rst ();
        #5 wr_rst <= 1;
        #20 wr_rst <= 0;
    endtask
    task task_rd_rst ();
        #5 rd_rst <= 1;
        #20 rd_rst <= 0;
    endtask


    // ------------------------------------------------
    // Stimuli
    // ------------------------------------------------
    always @(posedge wr_clk) begin
        task_wr_rst();
        #clk1_period_ns;

        // Write
        if (o_ready == 1'b1) begin
            i_valid = 1'b1;
            i_data = 32'b10101010101010101010101010101010;
        end
    end

    always @(posedge rd_clk) begin
        task_rd_rst();
        #30;

        // Read
        if (o_ready == 1'b1 && o_data_valid == 1'b1) begin
            i_dready = 1;
            $display(o_data);
        end else begin
            i_dready = 0;
        end;

        #30;

        $stop; // End of Simulation
    end


endmodule